
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000786  0000081a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  0000081a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00000f70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be4  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002bb  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005e5  00000000  00000000  00001f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000032d  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059a  00000000  00000000  00002b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 02 	call	0x410	; 0x410 <main>
  8a:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPortDIR>:

#include "DIO.h"

void DIO_SetPortDIR(uint8 PORT , uint8 dir)
{
	switch (PORT)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_SetPortDIR+0x16>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_SetPortDIR+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <DIO_SetPortDIR+0x1a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f4       	brne	.+16     	; 0xb2 <DIO_SetPortDIR+0x20>
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <DIO_SetPortDIR+0x1e>
	{
		case DIO_PORTA:
		DDRA=dir;
  a4:	6a bb       	out	0x1a, r22	; 26
		break;
  a6:	08 95       	ret
		
		case DIO_PORTB:
		DDRB=dir;
  a8:	67 bb       	out	0x17, r22	; 23
		break;
  aa:	08 95       	ret
		
		case DIO_PORTC:
		DDRC=dir;
  ac:	64 bb       	out	0x14, r22	; 20
		break;
  ae:	08 95       	ret
		
		case DIO_PORTD:
		DDRD=dir;
  b0:	61 bb       	out	0x11, r22	; 17
  b2:	08 95       	ret

000000b4 <DIO_SetPINDIR>:
		break;
	}
}
void DIO_SetPINDIR(uint8 PORT  , uint8 PIN , uint8 DIR)
{
	switch (DIR)
  b4:	44 23       	and	r20, r20
  b6:	09 f4       	brne	.+2      	; 0xba <DIO_SetPINDIR+0x6>
  b8:	41 c0       	rjmp	.+130    	; 0x13c <DIO_SetPINDIR+0x88>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_SetPINDIR+0xc>
  be:	7e c0       	rjmp	.+252    	; 0x1bc <DIO_SetPINDIR+0x108>
	{
		case DIO_PIN_OUTPUT:
		switch (PORT)
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	a9 f0       	breq	.+42     	; 0xee <DIO_SetPINDIR+0x3a>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	30 f0       	brcs	.+12     	; 0xd4 <DIO_SetPINDIR+0x20>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	f1 f0       	breq	.+60     	; 0x108 <DIO_SetPINDIR+0x54>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_SetPINDIR+0x1e>
  d0:	75 c0       	rjmp	.+234    	; 0x1bc <DIO_SetPINDIR+0x108>
  d2:	27 c0       	rjmp	.+78     	; 0x122 <DIO_SetPINDIR+0x6e>
		{
			case DIO_PORTA:
			Set_bit(DDRA,PIN);
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	ac 01       	movw	r20, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_SetPINDIR+0x2e>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_SetPINDIR+0x2a>
  e6:	ba 01       	movw	r22, r20
  e8:	62 2b       	or	r22, r18
  ea:	6a bb       	out	0x1a, r22	; 26
			break;
  ec:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(DDRB,PIN);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_SetPINDIR+0x48>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_SetPINDIR+0x44>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
			break;
 106:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(DDRC,PIN);
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SetPINDIR+0x62>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SetPINDIR+0x5e>
 11a:	ba 01       	movw	r22, r20
 11c:	62 2b       	or	r22, r18
 11e:	64 bb       	out	0x14, r22	; 20
			break;
 120:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(DDRD,PIN);
 122:	21 b3       	in	r18, 0x11	; 17
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ac 01       	movw	r20, r24
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPINDIR+0x7c>
 12c:	44 0f       	add	r20, r20
 12e:	55 1f       	adc	r21, r21
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPINDIR+0x78>
 134:	ba 01       	movw	r22, r20
 136:	62 2b       	or	r22, r18
 138:	61 bb       	out	0x11, r22	; 17
			break;
 13a:	08 95       	ret
		}
		
		break;
		
		case DIO_PIN_INPUT:
		switch (PORT)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	a9 f0       	breq	.+42     	; 0x16a <DIO_SetPINDIR+0xb6>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	28 f0       	brcs	.+10     	; 0x14e <DIO_SetPINDIR+0x9a>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	f9 f0       	breq	.+62     	; 0x186 <DIO_SetPINDIR+0xd2>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	c1 f5       	brne	.+112    	; 0x1bc <DIO_SetPINDIR+0x108>
 14c:	2a c0       	rjmp	.+84     	; 0x1a2 <DIO_SetPINDIR+0xee>
		{
			case DIO_PORTA:
			Clr_bit(DDRA,PIN);
 14e:	2a b3       	in	r18, 0x1a	; 26
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPINDIR+0xa8>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPINDIR+0xa4>
 160:	ba 01       	movw	r22, r20
 162:	60 95       	com	r22
 164:	62 23       	and	r22, r18
 166:	6a bb       	out	0x1a, r22	; 26
			break;
 168:	08 95       	ret
			
			case DIO_PORTB:
			Clr_bit(DDRB,PIN);
 16a:	27 b3       	in	r18, 0x17	; 23
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ac 01       	movw	r20, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPINDIR+0xc4>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPINDIR+0xc0>
 17c:	ba 01       	movw	r22, r20
 17e:	60 95       	com	r22
 180:	62 23       	and	r22, r18
 182:	67 bb       	out	0x17, r22	; 23
			break;
 184:	08 95       	ret
			
			case DIO_PORTC:
			Clr_bit(DDRC,PIN);
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_SetPINDIR+0xe0>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_SetPINDIR+0xdc>
 198:	ba 01       	movw	r22, r20
 19a:	60 95       	com	r22
 19c:	62 23       	and	r22, r18
 19e:	64 bb       	out	0x14, r22	; 20
			break;
 1a0:	08 95       	ret
			
			case DIO_PORTD:
			Clr_bit(DDRD,PIN);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPINDIR+0xfc>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPINDIR+0xf8>
 1b4:	ba 01       	movw	r22, r20
 1b6:	60 95       	com	r22
 1b8:	62 23       	and	r22, r18
 1ba:	61 bb       	out	0x11, r22	; 17
 1bc:	08 95       	ret

000001be <DIO_WritePort>:
	}
}

void DIO_WritePort(uint8 PORT , uint8 val)
{
	switch (PORT)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	49 f0       	breq	.+18     	; 0x1d4 <DIO_WritePort+0x16>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_WritePort+0x12>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <DIO_WritePort+0x1a>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	41 f4       	brne	.+16     	; 0x1de <DIO_WritePort+0x20>
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <DIO_WritePort+0x1e>
	{
	case DIO_PORTA:
	PORTA = val;
 1d0:	6b bb       	out	0x1b, r22	; 27
	break;
 1d2:	08 95       	ret
	
	case DIO_PORTB:
	PORTB = val;
 1d4:	68 bb       	out	0x18, r22	; 24
	break;
 1d6:	08 95       	ret
	
	case DIO_PORTC:
	PORTC = val;
 1d8:	65 bb       	out	0x15, r22	; 21
	break;
 1da:	08 95       	ret
	
	case DIO_PORTD:
	PORTD = val;
 1dc:	62 bb       	out	0x12, r22	; 18
 1de:	08 95       	ret

000001e0 <DIO_WritePIN>:
	break;
	}
}
void DIO_WritePIN(uint8 PORT , uint8 PIN ,uint8 val)
{
	switch (val)
 1e0:	44 23       	and	r20, r20
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_WritePIN+0x6>
 1e4:	41 c0       	rjmp	.+130    	; 0x268 <DIO_WritePIN+0x88>
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_WritePIN+0xc>
 1ea:	7e c0       	rjmp	.+252    	; 0x2e8 <DIO_WritePIN+0x108>
	{
		case DIO_PIN_HIGH:
		switch (PORT)
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	a9 f0       	breq	.+42     	; 0x21a <DIO_WritePIN+0x3a>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	30 f0       	brcs	.+12     	; 0x200 <DIO_WritePIN+0x20>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	f1 f0       	breq	.+60     	; 0x234 <DIO_WritePIN+0x54>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_WritePIN+0x1e>
 1fc:	75 c0       	rjmp	.+234    	; 0x2e8 <DIO_WritePIN+0x108>
 1fe:	27 c0       	rjmp	.+78     	; 0x24e <DIO_WritePIN+0x6e>
		{
			case DIO_PORTA:
			Set_bit(PORTA,PIN);
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_WritePIN+0x2e>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_WritePIN+0x2a>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	6b bb       	out	0x1b, r22	; 27
			break;
 218:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(PORTB,PIN);
 21a:	28 b3       	in	r18, 0x18	; 24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_WritePIN+0x48>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_WritePIN+0x44>
 22c:	ba 01       	movw	r22, r20
 22e:	62 2b       	or	r22, r18
 230:	68 bb       	out	0x18, r22	; 24
			break;
 232:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(PORTC,PIN);
 234:	25 b3       	in	r18, 0x15	; 21
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ac 01       	movw	r20, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_WritePIN+0x62>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_WritePIN+0x5e>
 246:	ba 01       	movw	r22, r20
 248:	62 2b       	or	r22, r18
 24a:	65 bb       	out	0x15, r22	; 21
			break;
 24c:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(PORTD,PIN);
 24e:	22 b3       	in	r18, 0x12	; 18
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	ac 01       	movw	r20, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WritePIN+0x7c>
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WritePIN+0x78>
 260:	ba 01       	movw	r22, r20
 262:	62 2b       	or	r22, r18
 264:	62 bb       	out	0x12, r22	; 18
			break;
 266:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_LOW:
		switch (PORT)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	a9 f0       	breq	.+42     	; 0x296 <DIO_WritePIN+0xb6>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	28 f0       	brcs	.+10     	; 0x27a <DIO_WritePIN+0x9a>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	f9 f0       	breq	.+62     	; 0x2b2 <DIO_WritePIN+0xd2>
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	c1 f5       	brne	.+112    	; 0x2e8 <DIO_WritePIN+0x108>
 278:	2a c0       	rjmp	.+84     	; 0x2ce <DIO_WritePIN+0xee>
		{
		case DIO_PORTA:
		Clr_bit(PORTA,PIN);
 27a:	2b b3       	in	r18, 0x1b	; 27
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ac 01       	movw	r20, r24
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_WritePIN+0xa8>
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_WritePIN+0xa4>
 28c:	ba 01       	movw	r22, r20
 28e:	60 95       	com	r22
 290:	62 23       	and	r22, r18
 292:	6b bb       	out	0x1b, r22	; 27
		break;
 294:	08 95       	ret
		
		case DIO_PORTB:
		Clr_bit(PORTB,PIN);
 296:	28 b3       	in	r18, 0x18	; 24
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	ac 01       	movw	r20, r24
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_WritePIN+0xc4>
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_WritePIN+0xc0>
 2a8:	ba 01       	movw	r22, r20
 2aa:	60 95       	com	r22
 2ac:	62 23       	and	r22, r18
 2ae:	68 bb       	out	0x18, r22	; 24
		break;
 2b0:	08 95       	ret
		
		case DIO_PORTC:
		Clr_bit(PORTC,PIN);
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_WritePIN+0xe0>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_WritePIN+0xdc>
 2c4:	ba 01       	movw	r22, r20
 2c6:	60 95       	com	r22
 2c8:	62 23       	and	r22, r18
 2ca:	65 bb       	out	0x15, r22	; 21
		break;
 2cc:	08 95       	ret
		
		case DIO_PORTD:
		Clr_bit(PORTD,PIN);
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_WritePIN+0xfc>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_WritePIN+0xf8>
 2e0:	ba 01       	movw	r22, r20
 2e2:	60 95       	com	r22
 2e4:	62 23       	and	r22, r18
 2e6:	62 bb       	out	0x12, r22	; 18
 2e8:	08 95       	ret

000002ea <DIO_ReadPort>:
	
}

void DIO_ReadPort(uint8 PORT , uint8*val)
{
	switch (PORT)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	59 f0       	breq	.+22     	; 0x304 <DIO_ReadPort+0x1a>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <DIO_ReadPort+0x12>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	59 f0       	breq	.+22     	; 0x30c <DIO_ReadPort+0x22>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	81 f4       	brne	.+32     	; 0x31a <DIO_ReadPort+0x30>
 2fa:	0c c0       	rjmp	.+24     	; 0x314 <DIO_ReadPort+0x2a>
	{
		case DIO_PORTA:
		*val=PINA;
 2fc:	89 b3       	in	r24, 0x19	; 25
 2fe:	fb 01       	movw	r30, r22
 300:	80 83       	st	Z, r24
		break;
 302:	08 95       	ret
		
		case DIO_PORTB:
		*val=PINB;
 304:	86 b3       	in	r24, 0x16	; 22
 306:	fb 01       	movw	r30, r22
 308:	80 83       	st	Z, r24
		break;
 30a:	08 95       	ret
		
		case DIO_PORTC:
		*val=PINC;
 30c:	83 b3       	in	r24, 0x13	; 19
 30e:	fb 01       	movw	r30, r22
 310:	80 83       	st	Z, r24
		break;
 312:	08 95       	ret
		
		case DIO_PORTD:
		*val=PIND;
 314:	80 b3       	in	r24, 0x10	; 16
 316:	fb 01       	movw	r30, r22
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret

0000031c <DIO_ReadPin>:
		break;
	}
}
void DIO_ReadPin(uint8 PORT ,uint8 PIN , uint8* val)
{
	switch(PORT)
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	a1 f0       	breq	.+40     	; 0x348 <DIO_ReadPin+0x2c>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	28 f0       	brcs	.+10     	; 0x32e <DIO_ReadPin+0x12>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	e9 f0       	breq	.+58     	; 0x362 <DIO_ReadPin+0x46>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	a1 f5       	brne	.+104    	; 0x394 <DIO_ReadPin+0x78>
 32c:	27 c0       	rjmp	.+78     	; 0x37c <DIO_ReadPin+0x60>
	{
		case DIO_PORTA:
		*val=Get_bit(PINA,PIN);
 32e:	89 b3       	in	r24, 0x19	; 25
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	9c 01       	movw	r18, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_ReadPin+0x1e>
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_ReadPin+0x1a>
 33e:	b9 01       	movw	r22, r18
 340:	61 70       	andi	r22, 0x01	; 1
 342:	fa 01       	movw	r30, r20
 344:	60 83       	st	Z, r22
		break;
 346:	08 95       	ret
		
		case DIO_PORTB:
		*val=Get_bit(PINB,PIN);
 348:	86 b3       	in	r24, 0x16	; 22
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	9c 01       	movw	r18, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_ReadPin+0x38>
 350:	35 95       	asr	r19
 352:	27 95       	ror	r18
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_ReadPin+0x34>
 358:	b9 01       	movw	r22, r18
 35a:	61 70       	andi	r22, 0x01	; 1
 35c:	fa 01       	movw	r30, r20
 35e:	60 83       	st	Z, r22
		break;
 360:	08 95       	ret
		
		case DIO_PORTC:
		*val=Get_bit(PINC,PIN);
 362:	83 b3       	in	r24, 0x13	; 19
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	9c 01       	movw	r18, r24
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_ReadPin+0x52>
 36a:	35 95       	asr	r19
 36c:	27 95       	ror	r18
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_ReadPin+0x4e>
 372:	b9 01       	movw	r22, r18
 374:	61 70       	andi	r22, 0x01	; 1
 376:	fa 01       	movw	r30, r20
 378:	60 83       	st	Z, r22
		break;
 37a:	08 95       	ret
		
		case DIO_PORTD:
		*val=Get_bit(PIND,PIN);
 37c:	80 b3       	in	r24, 0x10	; 16
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	9c 01       	movw	r18, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_ReadPin+0x6c>
 384:	35 95       	asr	r19
 386:	27 95       	ror	r18
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_ReadPin+0x68>
 38c:	b9 01       	movw	r22, r18
 38e:	61 70       	andi	r22, 0x01	; 1
 390:	fa 01       	movw	r30, r20
 392:	60 83       	st	Z, r22
 394:	08 95       	ret

00000396 <DIO_togglePin>:
	}
}

void DIO_togglePin(uint8 PORT , uint8 PIN)
{
	switch (PORT)
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	a1 f0       	breq	.+40     	; 0x3c2 <DIO_togglePin+0x2c>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	28 f0       	brcs	.+10     	; 0x3a8 <DIO_togglePin+0x12>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	e9 f0       	breq	.+58     	; 0x3dc <DIO_togglePin+0x46>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	a1 f5       	brne	.+104    	; 0x40e <DIO_togglePin+0x78>
 3a6:	27 c0       	rjmp	.+78     	; 0x3f6 <DIO_togglePin+0x60>
	{
		case DIO_PORTA:
		toggle_bit(PORTA,PIN);
 3a8:	2b b3       	in	r18, 0x1b	; 27
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ac 01       	movw	r20, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_togglePin+0x20>
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_togglePin+0x1c>
 3ba:	ba 01       	movw	r22, r20
 3bc:	62 27       	eor	r22, r18
 3be:	6b bb       	out	0x1b, r22	; 27
		break;
 3c0:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB,PIN);
 3c2:	28 b3       	in	r18, 0x18	; 24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ac 01       	movw	r20, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_togglePin+0x3a>
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_togglePin+0x36>
 3d4:	ba 01       	movw	r22, r20
 3d6:	62 27       	eor	r22, r18
 3d8:	68 bb       	out	0x18, r22	; 24
		break;
 3da:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC,PIN);
 3dc:	25 b3       	in	r18, 0x15	; 21
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	ac 01       	movw	r20, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_togglePin+0x54>
 3e6:	44 0f       	add	r20, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_togglePin+0x50>
 3ee:	ba 01       	movw	r22, r20
 3f0:	62 27       	eor	r22, r18
 3f2:	65 bb       	out	0x15, r22	; 21
		break;
 3f4:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD,PIN);
 3f6:	22 b3       	in	r18, 0x12	; 18
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	ac 01       	movw	r20, r24
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_togglePin+0x6e>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_togglePin+0x6a>
 408:	ba 01       	movw	r22, r20
 40a:	62 27       	eor	r22, r18
 40c:	62 bb       	out	0x12, r22	; 18
 40e:	08 95       	ret

00000410 <main>:

#include "Servo.h"

int main(void)
{
	Servo_Init();
 410:	0e 94 10 02 	call	0x420	; 0x420 <Servo_Init>
	PWM1_INIT();
 414:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM1_INIT>
	PWM1_Generate(10);
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <PWM1_Generate>
 41e:	ff cf       	rjmp	.-2      	; 0x41e <main+0xe>

00000420 <Servo_Init>:
#include "Servo.h"


void Servo_Init(void)
{
	DIO_SetPINDIR(DIO_PORTD , DIO_PIN5 , DIO_PIN_OUTPUT);
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	65 e0       	ldi	r22, 0x05	; 5
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	PWM1_INIT();
 42a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWM1_INIT>
	PWM1_Start();
 42e:	0e 94 77 03 	call	0x6ee	; 0x6ee <PWM1_Start>
}
 432:	08 95       	ret

00000434 <Servo_SetDegree>:

void Servo_SetDegree(uint8 degree)
{
	
 434:	08 95       	ret

00000436 <Timer0_Init>:
{
	#if TIMER0_MODE==NORMAL
	
	/*Initialize Timer 0  as Normal mode */
	
	TCCR0 |= 0x00 ;
 436:	83 b7       	in	r24, 0x33	; 51
 438:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= 0x01;
 43a:	89 b7       	in	r24, 0x39	; 57
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	89 bf       	out	0x39, r24	; 57

	SREG |= 0x80;
 440:	8f b7       	in	r24, 0x3f	; 63
 442:	80 68       	ori	r24, 0x80	; 128
 444:	8f bf       	out	0x3f, r24	; 63
	Set_bit(TCCR0,3);
	SREG |=0x80;
	Set_bit(TIMSK,1);
	
	#endif
}
 446:	08 95       	ret

00000448 <Timer0_Start>:
void Timer0_Start(void)
{
	
	/* start timer with prescaller   1024 */
	
	TCCR0 |= 0x05;
 448:	83 b7       	in	r24, 0x33	; 51
 44a:	85 60       	ori	r24, 0x05	; 5
 44c:	83 bf       	out	0x33, r24	; 51
	
}
 44e:	08 95       	ret

00000450 <Timer0_Stop>:

void Timer0_Stop(void)
{
	
	Clr_bit(TCCR0,0);
 450:	83 b7       	in	r24, 0x33	; 51
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	83 bf       	out	0x33, r24	; 51
	Clr_bit(TCCR0,1);
 456:	83 b7       	in	r24, 0x33	; 51
 458:	8d 7f       	andi	r24, 0xFD	; 253
 45a:	83 bf       	out	0x33, r24	; 51
	Clr_bit(TCCR0,2);
 45c:	83 b7       	in	r24, 0x33	; 51
 45e:	8b 7f       	andi	r24, 0xFB	; 251
 460:	83 bf       	out	0x33, r24	; 51
	
}
 462:	08 95       	ret

00000464 <Timer0_SetDelay>:
	
	
	/* tick time in micro second */
	uint8 Tick_Time_us = (1024 / 16);
	
	uint32 Total_Ticks = (Delay_Ms * 1000) / Tick_Time_us;
 464:	28 ee       	ldi	r18, 0xE8	; 232
 466:	33 e0       	ldi	r19, 0x03	; 3
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__mulsi3>
 470:	dc 01       	movw	r26, r24
 472:	cb 01       	movw	r24, r22
 474:	68 94       	set
 476:	15 f8       	bld	r1, 5
 478:	b6 95       	lsr	r27
 47a:	a7 95       	ror	r26
 47c:	97 95       	ror	r25
 47e:	87 95       	ror	r24
 480:	16 94       	lsr	r1
 482:	d1 f7       	brne	.-12     	; 0x478 <Timer0_SetDelay+0x14>
	
	#if TIMER0_MODE==NORMAL
	
	Number_OverFlows = Total_Ticks / 256 ;
 484:	49 2f       	mov	r20, r25
 486:	5a 2f       	mov	r21, r26
 488:	6b 2f       	mov	r22, r27
 48a:	77 27       	eor	r23, r23
	
	CounterRegister_InitValue = 256 - (Total_Ticks % 256) ; //256 - ((  ((float) Total_Ticks / 256 ) - Number_OverFlows ) * 256 );
 48c:	81 95       	neg	r24
 48e:	80 93 69 00 	sts	0x0069, r24
	
	
	TCNT0 = CounterRegister_InitValue ;
 492:	82 bf       	out	0x32, r24	; 50
	
	Number_OverFlows ++;
 494:	db 01       	movw	r26, r22
 496:	ca 01       	movw	r24, r20
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	a1 1d       	adc	r26, r1
 49c:	b1 1d       	adc	r27, r1
 49e:	80 93 65 00 	sts	0x0065, r24
 4a2:	90 93 66 00 	sts	0x0066, r25
 4a6:	a0 93 67 00 	sts	0x0067, r26
 4aa:	b0 93 68 00 	sts	0x0068, r27
		Num0_ComMatch=1;
	}
	
	
	#endif
}
 4ae:	08 95       	ret

000004b0 <timer0_SetCallBack>:


void timer0_SetCallBack(void (*ptr)(void))
{
	timer0_ptr_function = ptr;
 4b0:	90 93 6b 00 	sts	0x006B, r25
 4b4:	80 93 6a 00 	sts	0x006A, r24
}
 4b8:	08 95       	ret

000004ba <__vector_11>:


#if TIMER0_MODE==NORMAL 
ISR(TIMER0_OVF_vect)
{
 4ba:	1f 92       	push	r1
 4bc:	0f 92       	push	r0
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	0f 92       	push	r0
 4c2:	11 24       	eor	r1, r1
 4c4:	2f 93       	push	r18
 4c6:	3f 93       	push	r19
 4c8:	4f 93       	push	r20
 4ca:	5f 93       	push	r21
 4cc:	6f 93       	push	r22
 4ce:	7f 93       	push	r23
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	af 93       	push	r26
 4d6:	bf 93       	push	r27
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
	
	static uint32 counter = 0;
	
	counter++;
 4dc:	80 91 6c 00 	lds	r24, 0x006C
 4e0:	90 91 6d 00 	lds	r25, 0x006D
 4e4:	a0 91 6e 00 	lds	r26, 0x006E
 4e8:	b0 91 6f 00 	lds	r27, 0x006F
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	a1 1d       	adc	r26, r1
 4f0:	b1 1d       	adc	r27, r1
 4f2:	80 93 6c 00 	sts	0x006C, r24
 4f6:	90 93 6d 00 	sts	0x006D, r25
 4fa:	a0 93 6e 00 	sts	0x006E, r26
 4fe:	b0 93 6f 00 	sts	0x006F, r27
	
	if(counter == Number_OverFlows)
 502:	40 91 65 00 	lds	r20, 0x0065
 506:	50 91 66 00 	lds	r21, 0x0066
 50a:	60 91 67 00 	lds	r22, 0x0067
 50e:	70 91 68 00 	lds	r23, 0x0068
 512:	84 17       	cp	r24, r20
 514:	95 07       	cpc	r25, r21
 516:	a6 07       	cpc	r26, r22
 518:	b7 07       	cpc	r27, r23
 51a:	81 f4       	brne	.+32     	; 0x53c <__vector_11+0x82>
	{
		TCNT0 = CounterRegister_InitValue;
 51c:	80 91 69 00 	lds	r24, 0x0069
 520:	82 bf       	out	0x32, r24	; 50
		
		counter = 0;
 522:	10 92 6c 00 	sts	0x006C, r1
 526:	10 92 6d 00 	sts	0x006D, r1
 52a:	10 92 6e 00 	sts	0x006E, r1
 52e:	10 92 6f 00 	sts	0x006F, r1
		
		(*timer0_ptr_function)();  //why should we put the pointer between parentheses?
 532:	e0 91 6a 00 	lds	r30, 0x006A
 536:	f0 91 6b 00 	lds	r31, 0x006B
 53a:	09 95       	icall
		
	}
	
	
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <Timer1_Init>:



void Timer1_Init(void)
{
	TCCR1B|= 0x08;
 55e:	8e b5       	in	r24, 0x2e	; 46
 560:	88 60       	ori	r24, 0x08	; 8
 562:	8e bd       	out	0x2e, r24	; 46
	TIMSK|= 0x10;
 564:	89 b7       	in	r24, 0x39	; 57
 566:	80 61       	ori	r24, 0x10	; 16
 568:	89 bf       	out	0x39, r24	; 57
	SREG|= 0x80;
 56a:	8f b7       	in	r24, 0x3f	; 63
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	8f bf       	out	0x3f, r24	; 63
	
}
 570:	08 95       	ret

00000572 <Timer1_Start>:

void Timer1_Start(void)
{
	// Enable prescaler 1024
	TCCR1B|= 0x05;
 572:	8e b5       	in	r24, 0x2e	; 46
 574:	85 60       	ori	r24, 0x05	; 5
 576:	8e bd       	out	0x2e, r24	; 46
	
}
 578:	08 95       	ret

0000057a <Timer1_Stop>:

void Timer1_Stop(void)
{
	Clr_bit(TCCR1B,0);
 57a:	8e b5       	in	r24, 0x2e	; 46
 57c:	8e 7f       	andi	r24, 0xFE	; 254
 57e:	8e bd       	out	0x2e, r24	; 46
	Clr_bit(TCCR1B,1);
 580:	8e b5       	in	r24, 0x2e	; 46
 582:	8d 7f       	andi	r24, 0xFD	; 253
 584:	8e bd       	out	0x2e, r24	; 46
	Clr_bit(TCCR1B,2);
 586:	8e b5       	in	r24, 0x2e	; 46
 588:	8b 7f       	andi	r24, 0xFB	; 251
 58a:	8e bd       	out	0x2e, r24	; 46
}
 58c:	08 95       	ret

0000058e <Timer1_SetDelay>:

void Timer1_SetDelay(uint32 Delay_Ms)
{
	if(Delay_Ms < 4000)
 58e:	60 3a       	cpi	r22, 0xA0	; 160
 590:	2f e0       	ldi	r18, 0x0F	; 15
 592:	72 07       	cpc	r23, r18
 594:	20 e0       	ldi	r18, 0x00	; 0
 596:	82 07       	cpc	r24, r18
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	92 07       	cpc	r25, r18
 59c:	f8 f4       	brcc	.+62     	; 0x5dc <Timer1_SetDelay+0x4e>
	{
		
	uint8 tick_time=1024/16;
	uint32 Num_Ticks =(Delay_Ms *1000) / tick_time;
 59e:	28 ee       	ldi	r18, 0xE8	; 232
 5a0:	33 e0       	ldi	r19, 0x03	; 3
 5a2:	40 e0       	ldi	r20, 0x00	; 0
 5a4:	50 e0       	ldi	r21, 0x00	; 0
 5a6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__mulsi3>
 5aa:	dc 01       	movw	r26, r24
 5ac:	cb 01       	movw	r24, r22
 5ae:	68 94       	set
 5b0:	15 f8       	bld	r1, 5
 5b2:	b6 95       	lsr	r27
 5b4:	a7 95       	ror	r26
 5b6:	97 95       	ror	r25
 5b8:	87 95       	ror	r24
 5ba:	16 94       	lsr	r1
 5bc:	d1 f7       	brne	.-12     	; 0x5b2 <Timer1_SetDelay+0x24>
	
	OCR1A = Num_Ticks -1;
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	9b bd       	out	0x2b, r25	; 43
 5c2:	8a bd       	out	0x2a, r24	; 42
	
	Num_ComMatch =1;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	a0 e0       	ldi	r26, 0x00	; 0
 5ca:	b0 e0       	ldi	r27, 0x00	; 0
 5cc:	80 93 61 00 	sts	0x0061, r24
 5d0:	90 93 62 00 	sts	0x0062, r25
 5d4:	a0 93 63 00 	sts	0x0063, r26
 5d8:	b0 93 64 00 	sts	0x0064, r27
 5dc:	08 95       	ret

000005de <timer1_SetCallBack>:
	}	
}

void timer1_SetCallBack(void (*ptr)(void))
{
	timer1_ptr_function = ptr;
 5de:	90 93 71 00 	sts	0x0071, r25
 5e2:	80 93 70 00 	sts	0x0070, r24
}
 5e6:	08 95       	ret

000005e8 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
	static uint32 counter =0;
	counter++;
 60a:	80 91 72 00 	lds	r24, 0x0072
 60e:	90 91 73 00 	lds	r25, 0x0073
 612:	a0 91 74 00 	lds	r26, 0x0074
 616:	b0 91 75 00 	lds	r27, 0x0075
 61a:	01 96       	adiw	r24, 0x01	; 1
 61c:	a1 1d       	adc	r26, r1
 61e:	b1 1d       	adc	r27, r1
 620:	80 93 72 00 	sts	0x0072, r24
 624:	90 93 73 00 	sts	0x0073, r25
 628:	a0 93 74 00 	sts	0x0074, r26
 62c:	b0 93 75 00 	sts	0x0075, r27
	if (counter == Num_ComMatch)
 630:	40 91 61 00 	lds	r20, 0x0061
 634:	50 91 62 00 	lds	r21, 0x0062
 638:	60 91 63 00 	lds	r22, 0x0063
 63c:	70 91 64 00 	lds	r23, 0x0064
 640:	84 17       	cp	r24, r20
 642:	95 07       	cpc	r25, r21
 644:	a6 07       	cpc	r26, r22
 646:	b7 07       	cpc	r27, r23
 648:	69 f4       	brne	.+26     	; 0x664 <__vector_7+0x7c>
	{
		counter =0;
 64a:	10 92 72 00 	sts	0x0072, r1
 64e:	10 92 73 00 	sts	0x0073, r1
 652:	10 92 74 00 	sts	0x0074, r1
 656:	10 92 75 00 	sts	0x0075, r1
		(*timer1_ptr_function)();
 65a:	e0 91 70 00 	lds	r30, 0x0070
 65e:	f0 91 71 00 	lds	r31, 0x0071
 662:	09 95       	icall
	}
	
}
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <PWM0_INIT>:


void PWM0_INIT(void)
{
	//setting pwm mode
	TCCR0 |= 0x48;
 686:	83 b7       	in	r24, 0x33	; 51
 688:	88 64       	ori	r24, 0x48	; 72
 68a:	83 bf       	out	0x33, r24	; 51
	//setting non inverted mode
	TCCR0 |= 0x20;
 68c:	83 b7       	in	r24, 0x33	; 51
 68e:	80 62       	ori	r24, 0x20	; 32
 690:	83 bf       	out	0x33, r24	; 51
}
 692:	08 95       	ret

00000694 <PWM0_Generate>:

void PWM0_Generate(uint16 Duty_Cycle)
{
	OCR0 =( (Duty_Cycle * 256)/100) - 1;
 694:	38 2f       	mov	r19, r24
 696:	20 e0       	ldi	r18, 0x00	; 0
 698:	c9 01       	movw	r24, r18
 69a:	64 e6       	ldi	r22, 0x64	; 100
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	0e 94 9a 03 	call	0x734	; 0x734 <__udivmodhi4>
 6a2:	61 50       	subi	r22, 0x01	; 1
 6a4:	6c bf       	out	0x3c, r22	; 60
}
 6a6:	08 95       	ret

000006a8 <PWM0_Start>:

void PWM0_Start(void)
{
	TCCR0 |= 0x03;
 6a8:	83 b7       	in	r24, 0x33	; 51
 6aa:	83 60       	ori	r24, 0x03	; 3
 6ac:	83 bf       	out	0x33, r24	; 51
}
 6ae:	08 95       	ret

000006b0 <PWM1_INIT>:

void PWM1_INIT(void)
{
	TCCR1A |= 0x02;
 6b0:	8f b5       	in	r24, 0x2f	; 47
 6b2:	82 60       	ori	r24, 0x02	; 2
 6b4:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B |= 0x18;
 6b6:	8e b5       	in	r24, 0x2e	; 46
 6b8:	88 61       	ori	r24, 0x18	; 24
 6ba:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 1250;
 6bc:	82 ee       	ldi	r24, 0xE2	; 226
 6be:	94 e0       	ldi	r25, 0x04	; 4
 6c0:	97 bd       	out	0x27, r25	; 39
 6c2:	86 bd       	out	0x26, r24	; 38
}
 6c4:	08 95       	ret

000006c6 <PWM1_Generate>:

void PWM1_Generate(uint8 Duty_Cycle)
{
	OCR1A = ( (Duty_Cycle * 1250 ) / 100 ) -1; // 1250 DETERMINED BY ME.
 6c6:	48 2f       	mov	r20, r24
 6c8:	50 e0       	ldi	r21, 0x00	; 0
 6ca:	22 ee       	ldi	r18, 0xE2	; 226
 6cc:	34 e0       	ldi	r19, 0x04	; 4
 6ce:	42 9f       	mul	r20, r18
 6d0:	c0 01       	movw	r24, r0
 6d2:	43 9f       	mul	r20, r19
 6d4:	90 0d       	add	r25, r0
 6d6:	52 9f       	mul	r21, r18
 6d8:	90 0d       	add	r25, r0
 6da:	11 24       	eor	r1, r1
 6dc:	64 e6       	ldi	r22, 0x64	; 100
 6de:	70 e0       	ldi	r23, 0x00	; 0
 6e0:	0e 94 ae 03 	call	0x75c	; 0x75c <__divmodhi4>
 6e4:	61 50       	subi	r22, 0x01	; 1
 6e6:	70 40       	sbci	r23, 0x00	; 0
 6e8:	7b bd       	out	0x2b, r23	; 43
 6ea:	6a bd       	out	0x2a, r22	; 42
}
 6ec:	08 95       	ret

000006ee <PWM1_Start>:

void PWM1_Start()
{
	TCCR1B |=0x04;
 6ee:	8e b5       	in	r24, 0x2e	; 46
 6f0:	84 60       	ori	r24, 0x04	; 4
 6f2:	8e bd       	out	0x2e, r24	; 46
}
 6f4:	08 95       	ret

000006f6 <__mulsi3>:
 6f6:	62 9f       	mul	r22, r18
 6f8:	d0 01       	movw	r26, r0
 6fa:	73 9f       	mul	r23, r19
 6fc:	f0 01       	movw	r30, r0
 6fe:	82 9f       	mul	r24, r18
 700:	e0 0d       	add	r30, r0
 702:	f1 1d       	adc	r31, r1
 704:	64 9f       	mul	r22, r20
 706:	e0 0d       	add	r30, r0
 708:	f1 1d       	adc	r31, r1
 70a:	92 9f       	mul	r25, r18
 70c:	f0 0d       	add	r31, r0
 70e:	83 9f       	mul	r24, r19
 710:	f0 0d       	add	r31, r0
 712:	74 9f       	mul	r23, r20
 714:	f0 0d       	add	r31, r0
 716:	65 9f       	mul	r22, r21
 718:	f0 0d       	add	r31, r0
 71a:	99 27       	eor	r25, r25
 71c:	72 9f       	mul	r23, r18
 71e:	b0 0d       	add	r27, r0
 720:	e1 1d       	adc	r30, r1
 722:	f9 1f       	adc	r31, r25
 724:	63 9f       	mul	r22, r19
 726:	b0 0d       	add	r27, r0
 728:	e1 1d       	adc	r30, r1
 72a:	f9 1f       	adc	r31, r25
 72c:	bd 01       	movw	r22, r26
 72e:	cf 01       	movw	r24, r30
 730:	11 24       	eor	r1, r1
 732:	08 95       	ret

00000734 <__udivmodhi4>:
 734:	aa 1b       	sub	r26, r26
 736:	bb 1b       	sub	r27, r27
 738:	51 e1       	ldi	r21, 0x11	; 17
 73a:	07 c0       	rjmp	.+14     	; 0x74a <__udivmodhi4_ep>

0000073c <__udivmodhi4_loop>:
 73c:	aa 1f       	adc	r26, r26
 73e:	bb 1f       	adc	r27, r27
 740:	a6 17       	cp	r26, r22
 742:	b7 07       	cpc	r27, r23
 744:	10 f0       	brcs	.+4      	; 0x74a <__udivmodhi4_ep>
 746:	a6 1b       	sub	r26, r22
 748:	b7 0b       	sbc	r27, r23

0000074a <__udivmodhi4_ep>:
 74a:	88 1f       	adc	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	5a 95       	dec	r21
 750:	a9 f7       	brne	.-22     	; 0x73c <__udivmodhi4_loop>
 752:	80 95       	com	r24
 754:	90 95       	com	r25
 756:	bc 01       	movw	r22, r24
 758:	cd 01       	movw	r24, r26
 75a:	08 95       	ret

0000075c <__divmodhi4>:
 75c:	97 fb       	bst	r25, 7
 75e:	09 2e       	mov	r0, r25
 760:	07 26       	eor	r0, r23
 762:	0a d0       	rcall	.+20     	; 0x778 <__divmodhi4_neg1>
 764:	77 fd       	sbrc	r23, 7
 766:	04 d0       	rcall	.+8      	; 0x770 <__divmodhi4_neg2>
 768:	e5 df       	rcall	.-54     	; 0x734 <__udivmodhi4>
 76a:	06 d0       	rcall	.+12     	; 0x778 <__divmodhi4_neg1>
 76c:	00 20       	and	r0, r0
 76e:	1a f4       	brpl	.+6      	; 0x776 <__divmodhi4_exit>

00000770 <__divmodhi4_neg2>:
 770:	70 95       	com	r23
 772:	61 95       	neg	r22
 774:	7f 4f       	sbci	r23, 0xFF	; 255

00000776 <__divmodhi4_exit>:
 776:	08 95       	ret

00000778 <__divmodhi4_neg1>:
 778:	f6 f7       	brtc	.-4      	; 0x776 <__divmodhi4_exit>
 77a:	90 95       	com	r25
 77c:	81 95       	neg	r24
 77e:	9f 4f       	sbci	r25, 0xFF	; 255
 780:	08 95       	ret

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
