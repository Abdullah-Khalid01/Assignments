
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000d6a  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800078  00800078  00000e16  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00001570  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c6  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000446  00000000  00000000  000029b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094a  00000000  00000000  00002dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  00003748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009da  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 9b 05 	jmp	0xb36	; 0xb36 <__vector_6>
  1c:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 04 	jmp	0x88e	; 0x88e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 39       	cpi	r26, 0x9D	; 157
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <main>
  8a:	0c 94 b3 06 	jmp	0xd66	; 0xd66 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPortDIR>:

#include "DIO.h"

void DIO_SetPortDIR(uint8 PORT , uint8 dir)
{
	switch (PORT)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	49 f0       	breq	.+18     	; 0xa8 <DIO_SetPortDIR+0x16>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	28 f0       	brcs	.+10     	; 0xa4 <DIO_SetPortDIR+0x12>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	39 f0       	breq	.+14     	; 0xac <DIO_SetPortDIR+0x1a>
  9e:	83 30       	cpi	r24, 0x03	; 3
  a0:	41 f4       	brne	.+16     	; 0xb2 <DIO_SetPortDIR+0x20>
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <DIO_SetPortDIR+0x1e>
	{
		case DIO_PORTA:
		DDRA=dir;
  a4:	6a bb       	out	0x1a, r22	; 26
		break;
  a6:	08 95       	ret
		
		case DIO_PORTB:
		DDRB=dir;
  a8:	67 bb       	out	0x17, r22	; 23
		break;
  aa:	08 95       	ret
		
		case DIO_PORTC:
		DDRC=dir;
  ac:	64 bb       	out	0x14, r22	; 20
		break;
  ae:	08 95       	ret
		
		case DIO_PORTD:
		DDRD=dir;
  b0:	61 bb       	out	0x11, r22	; 17
  b2:	08 95       	ret

000000b4 <DIO_SetPINDIR>:
		break;
	}
}
void DIO_SetPINDIR(uint8 PORT  , uint8 PIN , uint8 DIR)
{
	switch (DIR)
  b4:	44 23       	and	r20, r20
  b6:	09 f4       	brne	.+2      	; 0xba <DIO_SetPINDIR+0x6>
  b8:	41 c0       	rjmp	.+130    	; 0x13c <DIO_SetPINDIR+0x88>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_SetPINDIR+0xc>
  be:	7e c0       	rjmp	.+252    	; 0x1bc <DIO_SetPINDIR+0x108>
	{
		case DIO_PIN_OUTPUT:
		switch (PORT)
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	a9 f0       	breq	.+42     	; 0xee <DIO_SetPINDIR+0x3a>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	30 f0       	brcs	.+12     	; 0xd4 <DIO_SetPINDIR+0x20>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	f1 f0       	breq	.+60     	; 0x108 <DIO_SetPINDIR+0x54>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	09 f0       	breq	.+2      	; 0xd2 <DIO_SetPINDIR+0x1e>
  d0:	75 c0       	rjmp	.+234    	; 0x1bc <DIO_SetPINDIR+0x108>
  d2:	27 c0       	rjmp	.+78     	; 0x122 <DIO_SetPINDIR+0x6e>
		{
			case DIO_PORTA:
			Set_bit(DDRA,PIN);
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	ac 01       	movw	r20, r24
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_SetPINDIR+0x2e>
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_SetPINDIR+0x2a>
  e6:	ba 01       	movw	r22, r20
  e8:	62 2b       	or	r22, r18
  ea:	6a bb       	out	0x1a, r22	; 26
			break;
  ec:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(DDRB,PIN);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_SetPINDIR+0x48>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_SetPINDIR+0x44>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
			break;
 106:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(DDRC,PIN);
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SetPINDIR+0x62>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SetPINDIR+0x5e>
 11a:	ba 01       	movw	r22, r20
 11c:	62 2b       	or	r22, r18
 11e:	64 bb       	out	0x14, r22	; 20
			break;
 120:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(DDRD,PIN);
 122:	21 b3       	in	r18, 0x11	; 17
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	ac 01       	movw	r20, r24
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPINDIR+0x7c>
 12c:	44 0f       	add	r20, r20
 12e:	55 1f       	adc	r21, r21
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPINDIR+0x78>
 134:	ba 01       	movw	r22, r20
 136:	62 2b       	or	r22, r18
 138:	61 bb       	out	0x11, r22	; 17
			break;
 13a:	08 95       	ret
		}
		
		break;
		
		case DIO_PIN_INPUT:
		switch (PORT)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	a9 f0       	breq	.+42     	; 0x16a <DIO_SetPINDIR+0xb6>
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	28 f0       	brcs	.+10     	; 0x14e <DIO_SetPINDIR+0x9a>
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	f9 f0       	breq	.+62     	; 0x186 <DIO_SetPINDIR+0xd2>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	c1 f5       	brne	.+112    	; 0x1bc <DIO_SetPINDIR+0x108>
 14c:	2a c0       	rjmp	.+84     	; 0x1a2 <DIO_SetPINDIR+0xee>
		{
			case DIO_PORTA:
			Clr_bit(DDRA,PIN);
 14e:	2a b3       	in	r18, 0x1a	; 26
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ac 01       	movw	r20, r24
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_SetPINDIR+0xa8>
 158:	44 0f       	add	r20, r20
 15a:	55 1f       	adc	r21, r21
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_SetPINDIR+0xa4>
 160:	ba 01       	movw	r22, r20
 162:	60 95       	com	r22
 164:	62 23       	and	r22, r18
 166:	6a bb       	out	0x1a, r22	; 26
			break;
 168:	08 95       	ret
			
			case DIO_PORTB:
			Clr_bit(DDRB,PIN);
 16a:	27 b3       	in	r18, 0x17	; 23
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	ac 01       	movw	r20, r24
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPINDIR+0xc4>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPINDIR+0xc0>
 17c:	ba 01       	movw	r22, r20
 17e:	60 95       	com	r22
 180:	62 23       	and	r22, r18
 182:	67 bb       	out	0x17, r22	; 23
			break;
 184:	08 95       	ret
			
			case DIO_PORTC:
			Clr_bit(DDRC,PIN);
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_SetPINDIR+0xe0>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_SetPINDIR+0xdc>
 198:	ba 01       	movw	r22, r20
 19a:	60 95       	com	r22
 19c:	62 23       	and	r22, r18
 19e:	64 bb       	out	0x14, r22	; 20
			break;
 1a0:	08 95       	ret
			
			case DIO_PORTD:
			Clr_bit(DDRD,PIN);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPINDIR+0xfc>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPINDIR+0xf8>
 1b4:	ba 01       	movw	r22, r20
 1b6:	60 95       	com	r22
 1b8:	62 23       	and	r22, r18
 1ba:	61 bb       	out	0x11, r22	; 17
 1bc:	08 95       	ret

000001be <DIO_WritePort>:
	}
}

void DIO_WritePort(uint8 PORT , uint8 val)
{
	switch (PORT)
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	49 f0       	breq	.+18     	; 0x1d4 <DIO_WritePort+0x16>
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	28 f0       	brcs	.+10     	; 0x1d0 <DIO_WritePort+0x12>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <DIO_WritePort+0x1a>
 1ca:	83 30       	cpi	r24, 0x03	; 3
 1cc:	41 f4       	brne	.+16     	; 0x1de <DIO_WritePort+0x20>
 1ce:	06 c0       	rjmp	.+12     	; 0x1dc <DIO_WritePort+0x1e>
	{
	case DIO_PORTA:
	PORTA = val;
 1d0:	6b bb       	out	0x1b, r22	; 27
	break;
 1d2:	08 95       	ret
	
	case DIO_PORTB:
	PORTB = val;
 1d4:	68 bb       	out	0x18, r22	; 24
	break;
 1d6:	08 95       	ret
	
	case DIO_PORTC:
	PORTC = val;
 1d8:	65 bb       	out	0x15, r22	; 21
	break;
 1da:	08 95       	ret
	
	case DIO_PORTD:
	PORTD = val;
 1dc:	62 bb       	out	0x12, r22	; 18
 1de:	08 95       	ret

000001e0 <DIO_WritePIN>:
	break;
	}
}
void DIO_WritePIN(uint8 PORT , uint8 PIN ,uint8 val)
{
	switch (val)
 1e0:	44 23       	and	r20, r20
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <DIO_WritePIN+0x6>
 1e4:	41 c0       	rjmp	.+130    	; 0x268 <DIO_WritePIN+0x88>
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	09 f0       	breq	.+2      	; 0x1ec <DIO_WritePIN+0xc>
 1ea:	7e c0       	rjmp	.+252    	; 0x2e8 <DIO_WritePIN+0x108>
	{
		case DIO_PIN_HIGH:
		switch (PORT)
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	a9 f0       	breq	.+42     	; 0x21a <DIO_WritePIN+0x3a>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	30 f0       	brcs	.+12     	; 0x200 <DIO_WritePIN+0x20>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	f1 f0       	breq	.+60     	; 0x234 <DIO_WritePIN+0x54>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_WritePIN+0x1e>
 1fc:	75 c0       	rjmp	.+234    	; 0x2e8 <DIO_WritePIN+0x108>
 1fe:	27 c0       	rjmp	.+78     	; 0x24e <DIO_WritePIN+0x6e>
		{
			case DIO_PORTA:
			Set_bit(PORTA,PIN);
 200:	2b b3       	in	r18, 0x1b	; 27
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_WritePIN+0x2e>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_WritePIN+0x2a>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	6b bb       	out	0x1b, r22	; 27
			break;
 218:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(PORTB,PIN);
 21a:	28 b3       	in	r18, 0x18	; 24
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_WritePIN+0x48>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_WritePIN+0x44>
 22c:	ba 01       	movw	r22, r20
 22e:	62 2b       	or	r22, r18
 230:	68 bb       	out	0x18, r22	; 24
			break;
 232:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(PORTC,PIN);
 234:	25 b3       	in	r18, 0x15	; 21
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ac 01       	movw	r20, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_WritePIN+0x62>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_WritePIN+0x5e>
 246:	ba 01       	movw	r22, r20
 248:	62 2b       	or	r22, r18
 24a:	65 bb       	out	0x15, r22	; 21
			break;
 24c:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(PORTD,PIN);
 24e:	22 b3       	in	r18, 0x12	; 18
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	ac 01       	movw	r20, r24
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_WritePIN+0x7c>
 258:	44 0f       	add	r20, r20
 25a:	55 1f       	adc	r21, r21
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_WritePIN+0x78>
 260:	ba 01       	movw	r22, r20
 262:	62 2b       	or	r22, r18
 264:	62 bb       	out	0x12, r22	; 18
			break;
 266:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_LOW:
		switch (PORT)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	a9 f0       	breq	.+42     	; 0x296 <DIO_WritePIN+0xb6>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	28 f0       	brcs	.+10     	; 0x27a <DIO_WritePIN+0x9a>
 270:	82 30       	cpi	r24, 0x02	; 2
 272:	f9 f0       	breq	.+62     	; 0x2b2 <DIO_WritePIN+0xd2>
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	c1 f5       	brne	.+112    	; 0x2e8 <DIO_WritePIN+0x108>
 278:	2a c0       	rjmp	.+84     	; 0x2ce <DIO_WritePIN+0xee>
		{
		case DIO_PORTA:
		Clr_bit(PORTA,PIN);
 27a:	2b b3       	in	r18, 0x1b	; 27
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ac 01       	movw	r20, r24
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_WritePIN+0xa8>
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_WritePIN+0xa4>
 28c:	ba 01       	movw	r22, r20
 28e:	60 95       	com	r22
 290:	62 23       	and	r22, r18
 292:	6b bb       	out	0x1b, r22	; 27
		break;
 294:	08 95       	ret
		
		case DIO_PORTB:
		Clr_bit(PORTB,PIN);
 296:	28 b3       	in	r18, 0x18	; 24
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	ac 01       	movw	r20, r24
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_WritePIN+0xc4>
 2a0:	44 0f       	add	r20, r20
 2a2:	55 1f       	adc	r21, r21
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_WritePIN+0xc0>
 2a8:	ba 01       	movw	r22, r20
 2aa:	60 95       	com	r22
 2ac:	62 23       	and	r22, r18
 2ae:	68 bb       	out	0x18, r22	; 24
		break;
 2b0:	08 95       	ret
		
		case DIO_PORTC:
		Clr_bit(PORTC,PIN);
 2b2:	25 b3       	in	r18, 0x15	; 21
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_WritePIN+0xe0>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_WritePIN+0xdc>
 2c4:	ba 01       	movw	r22, r20
 2c6:	60 95       	com	r22
 2c8:	62 23       	and	r22, r18
 2ca:	65 bb       	out	0x15, r22	; 21
		break;
 2cc:	08 95       	ret
		
		case DIO_PORTD:
		Clr_bit(PORTD,PIN);
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_WritePIN+0xfc>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_WritePIN+0xf8>
 2e0:	ba 01       	movw	r22, r20
 2e2:	60 95       	com	r22
 2e4:	62 23       	and	r22, r18
 2e6:	62 bb       	out	0x12, r22	; 18
 2e8:	08 95       	ret

000002ea <DIO_ReadPort>:
	
}

void DIO_ReadPort(uint8 PORT , uint8*val)
{
	switch (PORT)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	59 f0       	breq	.+22     	; 0x304 <DIO_ReadPort+0x1a>
 2ee:	81 30       	cpi	r24, 0x01	; 1
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <DIO_ReadPort+0x12>
 2f2:	82 30       	cpi	r24, 0x02	; 2
 2f4:	59 f0       	breq	.+22     	; 0x30c <DIO_ReadPort+0x22>
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	81 f4       	brne	.+32     	; 0x31a <DIO_ReadPort+0x30>
 2fa:	0c c0       	rjmp	.+24     	; 0x314 <DIO_ReadPort+0x2a>
	{
		case DIO_PORTA:
		*val=PINA;
 2fc:	89 b3       	in	r24, 0x19	; 25
 2fe:	fb 01       	movw	r30, r22
 300:	80 83       	st	Z, r24
		break;
 302:	08 95       	ret
		
		case DIO_PORTB:
		*val=PINB;
 304:	86 b3       	in	r24, 0x16	; 22
 306:	fb 01       	movw	r30, r22
 308:	80 83       	st	Z, r24
		break;
 30a:	08 95       	ret
		
		case DIO_PORTC:
		*val=PINC;
 30c:	83 b3       	in	r24, 0x13	; 19
 30e:	fb 01       	movw	r30, r22
 310:	80 83       	st	Z, r24
		break;
 312:	08 95       	ret
		
		case DIO_PORTD:
		*val=PIND;
 314:	80 b3       	in	r24, 0x10	; 16
 316:	fb 01       	movw	r30, r22
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret

0000031c <DIO_ReadPin>:
		break;
	}
}
void DIO_ReadPin(uint8 PORT ,uint8 PIN , uint8* val)
{
	switch(PORT)
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	a1 f0       	breq	.+40     	; 0x348 <DIO_ReadPin+0x2c>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	28 f0       	brcs	.+10     	; 0x32e <DIO_ReadPin+0x12>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	e9 f0       	breq	.+58     	; 0x362 <DIO_ReadPin+0x46>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	a1 f5       	brne	.+104    	; 0x394 <DIO_ReadPin+0x78>
 32c:	27 c0       	rjmp	.+78     	; 0x37c <DIO_ReadPin+0x60>
	{
		case DIO_PORTA:
		*val=Get_bit(PINA,PIN);
 32e:	89 b3       	in	r24, 0x19	; 25
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	9c 01       	movw	r18, r24
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_ReadPin+0x1e>
 336:	35 95       	asr	r19
 338:	27 95       	ror	r18
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_ReadPin+0x1a>
 33e:	b9 01       	movw	r22, r18
 340:	61 70       	andi	r22, 0x01	; 1
 342:	fa 01       	movw	r30, r20
 344:	60 83       	st	Z, r22
		break;
 346:	08 95       	ret
		
		case DIO_PORTB:
		*val=Get_bit(PINB,PIN);
 348:	86 b3       	in	r24, 0x16	; 22
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	9c 01       	movw	r18, r24
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_ReadPin+0x38>
 350:	35 95       	asr	r19
 352:	27 95       	ror	r18
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_ReadPin+0x34>
 358:	b9 01       	movw	r22, r18
 35a:	61 70       	andi	r22, 0x01	; 1
 35c:	fa 01       	movw	r30, r20
 35e:	60 83       	st	Z, r22
		break;
 360:	08 95       	ret
		
		case DIO_PORTC:
		*val=Get_bit(PINC,PIN);
 362:	83 b3       	in	r24, 0x13	; 19
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	9c 01       	movw	r18, r24
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_ReadPin+0x52>
 36a:	35 95       	asr	r19
 36c:	27 95       	ror	r18
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_ReadPin+0x4e>
 372:	b9 01       	movw	r22, r18
 374:	61 70       	andi	r22, 0x01	; 1
 376:	fa 01       	movw	r30, r20
 378:	60 83       	st	Z, r22
		break;
 37a:	08 95       	ret
		
		case DIO_PORTD:
		*val=Get_bit(PIND,PIN);
 37c:	80 b3       	in	r24, 0x10	; 16
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	9c 01       	movw	r18, r24
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_ReadPin+0x6c>
 384:	35 95       	asr	r19
 386:	27 95       	ror	r18
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_ReadPin+0x68>
 38c:	b9 01       	movw	r22, r18
 38e:	61 70       	andi	r22, 0x01	; 1
 390:	fa 01       	movw	r30, r20
 392:	60 83       	st	Z, r22
 394:	08 95       	ret

00000396 <DIO_togglePin>:
	}
}

void DIO_togglePin(uint8 PORT , uint8 PIN)
{
	switch (PORT)
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	a1 f0       	breq	.+40     	; 0x3c2 <DIO_togglePin+0x2c>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	28 f0       	brcs	.+10     	; 0x3a8 <DIO_togglePin+0x12>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	e9 f0       	breq	.+58     	; 0x3dc <DIO_togglePin+0x46>
 3a2:	83 30       	cpi	r24, 0x03	; 3
 3a4:	a1 f5       	brne	.+104    	; 0x40e <DIO_togglePin+0x78>
 3a6:	27 c0       	rjmp	.+78     	; 0x3f6 <DIO_togglePin+0x60>
	{
		case DIO_PORTA:
		toggle_bit(PORTA,PIN);
 3a8:	2b b3       	in	r18, 0x1b	; 27
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	ac 01       	movw	r20, r24
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_togglePin+0x20>
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_togglePin+0x1c>
 3ba:	ba 01       	movw	r22, r20
 3bc:	62 27       	eor	r22, r18
 3be:	6b bb       	out	0x1b, r22	; 27
		break;
 3c0:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB,PIN);
 3c2:	28 b3       	in	r18, 0x18	; 24
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	ac 01       	movw	r20, r24
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_togglePin+0x3a>
 3cc:	44 0f       	add	r20, r20
 3ce:	55 1f       	adc	r21, r21
 3d0:	6a 95       	dec	r22
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_togglePin+0x36>
 3d4:	ba 01       	movw	r22, r20
 3d6:	62 27       	eor	r22, r18
 3d8:	68 bb       	out	0x18, r22	; 24
		break;
 3da:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC,PIN);
 3dc:	25 b3       	in	r18, 0x15	; 21
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	ac 01       	movw	r20, r24
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_togglePin+0x54>
 3e6:	44 0f       	add	r20, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_togglePin+0x50>
 3ee:	ba 01       	movw	r22, r20
 3f0:	62 27       	eor	r22, r18
 3f2:	65 bb       	out	0x15, r22	; 21
		break;
 3f4:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD,PIN);
 3f6:	22 b3       	in	r18, 0x12	; 18
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	ac 01       	movw	r20, r24
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <DIO_togglePin+0x6e>
 400:	44 0f       	add	r20, r20
 402:	55 1f       	adc	r21, r21
 404:	6a 95       	dec	r22
 406:	e2 f7       	brpl	.-8      	; 0x400 <DIO_togglePin+0x6a>
 408:	ba 01       	movw	r22, r20
 40a:	62 27       	eor	r22, r18
 40c:	62 bb       	out	0x12, r22	; 18
 40e:	08 95       	ret

00000410 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(0x02);	
	
	#endif
}
void LCD_WRITE_COMMAND(uint8 cmd)
{
 410:	cf 93       	push	r28
 412:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_LOW) ;
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	62 e0       	ldi	r22, 0x02	; 2
 422:	40 e0       	ldi	r20, 0x00	; 0
 424:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 432:	8b b3       	in	r24, 0x1b	; 27
 434:	9c 2f       	mov	r25, r28
 436:	90 7f       	andi	r25, 0xF0	; 240
 438:	8f 70       	andi	r24, 0x0F	; 15
 43a:	89 2b       	or	r24, r25
 43c:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	63 e0       	ldi	r22, 0x03	; 3
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 448:	8f e9       	ldi	r24, 0x9F	; 159
 44a:	9f e0       	ldi	r25, 0x0F	; 15
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	f1 f7       	brne	.-4      	; 0x44c <LCD_WRITE_COMMAND+0x3c>
 450:	00 c0       	rjmp	.+0      	; 0x452 <LCD_WRITE_COMMAND+0x42>
 452:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	63 e0       	ldi	r22, 0x03	; 3
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	
	PORTA = (cmd <<4) | (PORTA & 0x0F);
 45e:	8b b3       	in	r24, 0x1b	; 27
 460:	c2 95       	swap	r28
 462:	c0 7f       	andi	r28, 0xF0	; 240
 464:	8f 70       	andi	r24, 0x0F	; 15
 466:	c8 2b       	or	r28, r24
 468:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	63 e0       	ldi	r22, 0x03	; 3
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 474:	8f e9       	ldi	r24, 0x9F	; 159
 476:	9f e0       	ldi	r25, 0x0F	; 15
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <LCD_WRITE_COMMAND+0x68>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <LCD_WRITE_COMMAND+0x6e>
 47e:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	63 e0       	ldi	r22, 0x03	; 3
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 48a:	8f e1       	ldi	r24, 0x1F	; 31
 48c:	9e e4       	ldi	r25, 0x4E	; 78
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_WRITE_COMMAND+0x7e>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_WRITE_COMMAND+0x84>
 494:	00 00       	nop
	
	_delay_ms(5);
	
	#endif 
	
}
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <LCD_INIT>:
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_OUTPUT) ;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	61 e0       	ldi	r22, 0x01	; 1
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_OUTPUT) ;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	62 e0       	ldi	r22, 0x02	; 2
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_OUTPUT) ;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	63 e0       	ldi	r22, 0x03	; 3
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	
	
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D4,DIO_PIN_OUTPUT);
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	64 e0       	ldi	r22, 0x04	; 4
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D5,DIO_PIN_OUTPUT);
 4c2:	80 e0       	ldi	r24, 0x00	; 0
 4c4:	65 e0       	ldi	r22, 0x05	; 5
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D6,DIO_PIN_OUTPUT);
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	66 e0       	ldi	r22, 0x06	; 6
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D7,DIO_PIN_OUTPUT);
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	67 e0       	ldi	r22, 0x07	; 7
 4da:	41 e0       	ldi	r20, 0x01	; 1
 4dc:	0e 94 5a 00 	call	0xb4	; 0xb4 <DIO_SetPINDIR>
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	91 ee       	ldi	r25, 0xE1	; 225
 4e4:	a4 e0       	ldi	r26, 0x04	; 4
 4e6:	81 50       	subi	r24, 0x01	; 1
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	a0 40       	sbci	r26, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <LCD_INIT+0x4c>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <LCD_INIT+0x56>
 4f0:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_WRITE_COMMAND(0x33);
 4f2:	83 e3       	ldi	r24, 0x33	; 51
 4f4:	0e 94 08 02 	call	0x410	; 0x410 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x32);
 4f8:	82 e3       	ldi	r24, 0x32	; 50
 4fa:	0e 94 08 02 	call	0x410	; 0x410 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x28);
 4fe:	88 e2       	ldi	r24, 0x28	; 40
 500:	0e 94 08 02 	call	0x410	; 0x410 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x0E);
 504:	8e e0       	ldi	r24, 0x0E	; 14
 506:	0e 94 08 02 	call	0x410	; 0x410 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x01);
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 08 02 	call	0x410	; 0x410 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x02);	
 510:	82 e0       	ldi	r24, 0x02	; 2
 512:	0e 94 08 02 	call	0x410	; 0x410 <LCD_WRITE_COMMAND>
	
	#endif
}
 516:	08 95       	ret

00000518 <LCD_WRITE_CHARACHTER>:
	
	#endif 
	
}
void LCD_WRITE_CHARACHTER(uint8 chr)
{
 518:	cf 93       	push	r28
 51a:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_HIGH) ;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	41 e0       	ldi	r20, 0x01	; 1
 522:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	62 e0       	ldi	r22, 0x02	; 2
 52a:	40 e0       	ldi	r20, 0x00	; 0
 52c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	63 e0       	ldi	r22, 0x03	; 3
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	
	PORTA = (chr & 0xF0);
 53a:	8c 2f       	mov	r24, r28
 53c:	80 7f       	andi	r24, 0xF0	; 240
 53e:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	63 e0       	ldi	r22, 0x03	; 3
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 54a:	8f e9       	ldi	r24, 0x9F	; 159
 54c:	9f e0       	ldi	r25, 0x0F	; 15
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <LCD_WRITE_CHARACHTER+0x36>
 552:	00 c0       	rjmp	.+0      	; 0x554 <LCD_WRITE_CHARACHTER+0x3c>
 554:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	40 e0       	ldi	r20, 0x00	; 0
 55c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
	
	PORTA = (chr <<4);
 560:	c2 95       	swap	r28
 562:	c0 7f       	andi	r28, 0xF0	; 240
 564:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 570:	8f e9       	ldi	r24, 0x9F	; 159
 572:	9f e0       	ldi	r25, 0x0F	; 15
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <LCD_WRITE_CHARACHTER+0x5c>
 578:	00 c0       	rjmp	.+0      	; 0x57a <LCD_WRITE_CHARACHTER+0x62>
 57a:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	63 e0       	ldi	r22, 0x03	; 3
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DIO_WritePIN>
 586:	8f e1       	ldi	r24, 0x1F	; 31
 588:	9e e4       	ldi	r25, 0x4E	; 78
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <LCD_WRITE_CHARACHTER+0x72>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <LCD_WRITE_CHARACHTER+0x78>
 590:	00 00       	nop
	
	_delay_ms(5);
	
	#endif
}
 592:	cf 91       	pop	r28
 594:	08 95       	ret

00000596 <LCD_WriteString>:
void LCD_WriteString(uint8 *str)
{
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	8c 01       	movw	r16, r24
	uint8 i=0;
	while(str[i] != '\0')
 59e:	fc 01       	movw	r30, r24
 5a0:	80 81       	ld	r24, Z
 5a2:	88 23       	and	r24, r24
 5a4:	51 f0       	breq	.+20     	; 0x5ba <LCD_WriteString+0x24>
	
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
 5a6:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
	{
		LCD_WRITE_CHARACHTER(str[i]);
 5a8:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_WRITE_CHARACHTER>
		i++;
 5ac:	cf 5f       	subi	r28, 0xFF	; 255
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
	while(str[i] != '\0')
 5ae:	f8 01       	movw	r30, r16
 5b0:	ec 0f       	add	r30, r28
 5b2:	f1 1d       	adc	r31, r1
 5b4:	80 81       	ld	r24, Z
 5b6:	88 23       	and	r24, r24
 5b8:	b9 f7       	brne	.-18     	; 0x5a8 <LCD_WriteString+0x12>
	{
		LCD_WRITE_CHARACHTER(str[i]);
		i++;
	}
}
 5ba:	cf 91       	pop	r28
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	08 95       	ret

000005c2 <LCD_CLEAR>:
void LCD_CLEAR(void)
{
	LCD_WRITE_COMMAND(0x01);
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 08 02 	call	0x410	; 0x410 <LCD_WRITE_COMMAND>
}
 5c8:	08 95       	ret

000005ca <LCD_MoveTo>:
void LCD_MoveTo(uint8 row , uint8 col)
{
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <LCD_MoveTo+0x6>
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
          uint8 pos[2] = {0x80 , 0xC0};
 5d4:	90 e8       	ldi	r25, 0x80	; 128
 5d6:	99 83       	std	Y+1, r25	; 0x01
 5d8:	90 ec       	ldi	r25, 0xC0	; 192
 5da:	9a 83       	std	Y+2, r25	; 0x02

          LCD_WRITE_COMMAND(pos[row]+col);
 5dc:	fe 01       	movw	r30, r28
 5de:	e8 0f       	add	r30, r24
 5e0:	f1 1d       	adc	r31, r1
 5e2:	81 81       	ldd	r24, Z+1	; 0x01
 5e4:	86 0f       	add	r24, r22
 5e6:	0e 94 08 02 	call	0x410	; 0x410 <LCD_WRITE_COMMAND>
}
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <LCD_WriteInteger>:
void LCD_WriteInteger(sint32 num)
{
 5f4:	4f 92       	push	r4
 5f6:	5f 92       	push	r5
 5f8:	6f 92       	push	r6
 5fa:	7f 92       	push	r7
 5fc:	8f 92       	push	r8
 5fe:	9f 92       	push	r9
 600:	af 92       	push	r10
 602:	bf 92       	push	r11
 604:	cf 92       	push	r12
 606:	df 92       	push	r13
 608:	ef 92       	push	r14
 60a:	ff 92       	push	r15
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	6b 01       	movw	r12, r22
 612:	7c 01       	movw	r14, r24
	sint32 temp =1;
	if(num < 0)
 614:	99 23       	and	r25, r25
 616:	5c f4       	brge	.+22     	; 0x62e <LCD_WriteInteger+0x3a>
	{
		LCD_WRITE_CHARACHTER('-');
 618:	8d e2       	ldi	r24, 0x2D	; 45
 61a:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_WRITE_CHARACHTER>
		num *= -1;
 61e:	f0 94       	com	r15
 620:	e0 94       	com	r14
 622:	d0 94       	com	r13
 624:	c0 94       	com	r12
 626:	c1 1c       	adc	r12, r1
 628:	d1 1c       	adc	r13, r1
 62a:	e1 1c       	adc	r14, r1
 62c:	f1 1c       	adc	r15, r1
	}
	
	while (num != 0)
 62e:	c1 14       	cp	r12, r1
 630:	d1 04       	cpc	r13, r1
 632:	e1 04       	cpc	r14, r1
 634:	f1 04       	cpc	r15, r1
 636:	09 f4       	brne	.+2      	; 0x63a <LCD_WriteInteger+0x46>
 638:	4f c0       	rjmp	.+158    	; 0x6d8 <LCD_WriteInteger+0xe4>
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	a0 e0       	ldi	r26, 0x00	; 0
 640:	b0 e0       	ldi	r27, 0x00	; 0
	{
		
		temp = (temp *10) +num %10;
 642:	0f 2e       	mov	r0, r31
 644:	fa e0       	ldi	r31, 0x0A	; 10
 646:	8f 2e       	mov	r8, r31
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	9f 2e       	mov	r9, r31
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	af 2e       	mov	r10, r31
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	bf 2e       	mov	r11, r31
 654:	f0 2d       	mov	r31, r0
 656:	bc 01       	movw	r22, r24
 658:	cd 01       	movw	r24, r26
 65a:	a5 01       	movw	r20, r10
 65c:	94 01       	movw	r18, r8
 65e:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsi3>
 662:	2b 01       	movw	r4, r22
 664:	3c 01       	movw	r6, r24
 666:	c7 01       	movw	r24, r14
 668:	b6 01       	movw	r22, r12
 66a:	0e 94 98 06 	call	0xd30	; 0xd30 <__divmodsi4>
 66e:	dc 01       	movw	r26, r24
 670:	cb 01       	movw	r24, r22
 672:	84 0d       	add	r24, r4
 674:	95 1d       	adc	r25, r5
 676:	a6 1d       	adc	r26, r6
 678:	b7 1d       	adc	r27, r7
		num=num/10;
 67a:	c2 2e       	mov	r12, r18
 67c:	d3 2e       	mov	r13, r19
 67e:	e4 2e       	mov	r14, r20
 680:	f5 2e       	mov	r15, r21
	{
		LCD_WRITE_CHARACHTER('-');
		num *= -1;
	}
	
	while (num != 0)
 682:	c1 14       	cp	r12, r1
 684:	d1 04       	cpc	r13, r1
 686:	e1 04       	cpc	r14, r1
 688:	f1 04       	cpc	r15, r1
 68a:	29 f7       	brne	.-54     	; 0x656 <LCD_WriteInteger+0x62>
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
 68c:	82 30       	cpi	r24, 0x02	; 2
 68e:	91 05       	cpc	r25, r1
 690:	a1 05       	cpc	r26, r1
 692:	b1 05       	cpc	r27, r1
 694:	0c f1       	brlt	.+66     	; 0x6d8 <LCD_WriteInteger+0xe4>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
 696:	0f 2e       	mov	r0, r31
 698:	fa e0       	ldi	r31, 0x0A	; 10
 69a:	4f 2e       	mov	r4, r31
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	5f 2e       	mov	r5, r31
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	6f 2e       	mov	r6, r31
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	7f 2e       	mov	r7, r31
 6a8:	f0 2d       	mov	r31, r0
 6aa:	bc 01       	movw	r22, r24
 6ac:	cd 01       	movw	r24, r26
 6ae:	a3 01       	movw	r20, r6
 6b0:	92 01       	movw	r18, r4
 6b2:	0e 94 98 06 	call	0xd30	; 0xd30 <__divmodsi4>
 6b6:	82 2e       	mov	r8, r18
 6b8:	c3 2e       	mov	r12, r19
 6ba:	c4 2f       	mov	r28, r20
 6bc:	d5 2f       	mov	r29, r21
 6be:	86 2f       	mov	r24, r22
 6c0:	80 5d       	subi	r24, 0xD0	; 208
 6c2:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_WRITE_CHARACHTER>
		temp/=10;
 6c6:	88 2d       	mov	r24, r8
 6c8:	9c 2d       	mov	r25, r12
 6ca:	ac 2f       	mov	r26, r28
 6cc:	bd 2f       	mov	r27, r29
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	91 05       	cpc	r25, r1
 6d2:	a1 05       	cpc	r26, r1
 6d4:	b1 05       	cpc	r27, r1
 6d6:	4c f7       	brge	.-46     	; 0x6aa <LCD_WriteInteger+0xb6>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
		temp/=10;
	}
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	ff 90       	pop	r15
 6de:	ef 90       	pop	r14
 6e0:	df 90       	pop	r13
 6e2:	cf 90       	pop	r12
 6e4:	bf 90       	pop	r11
 6e6:	af 90       	pop	r10
 6e8:	9f 90       	pop	r9
 6ea:	8f 90       	pop	r8
 6ec:	7f 90       	pop	r7
 6ee:	6f 90       	pop	r6
 6f0:	5f 90       	pop	r5
 6f2:	4f 90       	pop	r4
 6f4:	08 95       	ret

000006f6 <main>:
int main(void)
{
	uint32 Duty = 0;
	uint32 frequency =0;
	
	PWM2_Init();
 6f6:	0e 94 73 05 	call	0xae6	; 0xae6 <PWM2_Init>
	LCD_INIT();
 6fa:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_INIT>
	PWM2_generate(70);
 6fe:	66 e4       	ldi	r22, 0x46	; 70
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 78 05 	call	0xaf0	; 0xaf0 <PWM2_generate>
	
	ICU_Init();
 70a:	0e 94 65 05 	call	0xaca	; 0xaca <ICU_Init>
		   
		   frequency = 8000000 /(ICU_ReadCapturedVal_3 - ICU_ReadCapturedVal_1);
		   
		   LCD_MoveTo(0,0);
		   
		   LCD_WriteString("Duty Cycle :");
 70e:	0f 2e       	mov	r0, r31
 710:	f0 e6       	ldi	r31, 0x60	; 96
 712:	6f 2e       	mov	r6, r31
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	7f 2e       	mov	r7, r31
 718:	f0 2d       	mov	r31, r0
		   
		   LCD_WRITE_CHARACHTER('%');
		   
		   LCD_MoveTo(1,0);
		   
		   LCD_WriteString("Freq. :");
 71a:	0f 2e       	mov	r0, r31
 71c:	fd e6       	ldi	r31, 0x6D	; 109
 71e:	4f 2e       	mov	r4, r31
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	5f 2e       	mov	r5, r31
 724:	f0 2d       	mov	r31, r0
    {
       if (Cap_Counter == 3)
       {
		   Duty =((ICU_ReadCapturedVal_2 - ICU_ReadCapturedVal_1) * 100) / (ICU_ReadCapturedVal_3 - ICU_ReadCapturedVal_1);
		   
		   frequency = 8000000 /(ICU_ReadCapturedVal_3 - ICU_ReadCapturedVal_1);
 726:	0f 2e       	mov	r0, r31
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	8f 2e       	mov	r8, r31
 72c:	f2 e1       	ldi	r31, 0x12	; 18
 72e:	9f 2e       	mov	r9, r31
 730:	fa e7       	ldi	r31, 0x7A	; 122
 732:	af 2e       	mov	r10, r31
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	bf 2e       	mov	r11, r31
 738:	f0 2d       	mov	r31, r0
		   
		   LCD_WriteString("Freq. :");
		   
		   LCD_WriteInteger(frequency);
		   
		   LCD_WriteString("Hz");
 73a:	0f 2e       	mov	r0, r31
 73c:	f5 e7       	ldi	r31, 0x75	; 117
 73e:	2f 2e       	mov	r2, r31
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	3f 2e       	mov	r3, r31
 744:	f0 2d       	mov	r31, r0
	PWM2_generate(70);
	
	ICU_Init();
    while(1)
    {
       if (Cap_Counter == 3)
 746:	80 91 78 00 	lds	r24, 0x0078
 74a:	83 30       	cpi	r24, 0x03	; 3
 74c:	09 f0       	breq	.+2      	; 0x750 <main+0x5a>
 74e:	5c c0       	rjmp	.+184    	; 0x808 <main+0x112>
       {
		   Duty =((ICU_ReadCapturedVal_2 - ICU_ReadCapturedVal_1) * 100) / (ICU_ReadCapturedVal_3 - ICU_ReadCapturedVal_1);
 750:	40 91 81 00 	lds	r20, 0x0081
 754:	50 91 82 00 	lds	r21, 0x0082
 758:	60 91 83 00 	lds	r22, 0x0083
 75c:	70 91 84 00 	lds	r23, 0x0084
 760:	80 91 79 00 	lds	r24, 0x0079
 764:	90 91 7a 00 	lds	r25, 0x007A
 768:	a0 91 7b 00 	lds	r26, 0x007B
 76c:	b0 91 7c 00 	lds	r27, 0x007C
 770:	6c 01       	movw	r12, r24
 772:	7d 01       	movw	r14, r26
 774:	c4 1a       	sub	r12, r20
 776:	d5 0a       	sbc	r13, r21
 778:	e6 0a       	sbc	r14, r22
 77a:	f7 0a       	sbc	r15, r23
 77c:	80 91 7d 00 	lds	r24, 0x007D
 780:	90 91 7e 00 	lds	r25, 0x007E
 784:	a0 91 7f 00 	lds	r26, 0x007F
 788:	b0 91 80 00 	lds	r27, 0x0080
 78c:	84 1b       	sub	r24, r20
 78e:	95 0b       	sbc	r25, r21
 790:	a6 0b       	sbc	r26, r22
 792:	b7 0b       	sbc	r27, r23
 794:	bc 01       	movw	r22, r24
 796:	cd 01       	movw	r24, r26
 798:	24 e6       	ldi	r18, 0x64	; 100
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	40 e0       	ldi	r20, 0x00	; 0
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsi3>
 7a4:	a7 01       	movw	r20, r14
 7a6:	96 01       	movw	r18, r12
 7a8:	0e 94 76 06 	call	0xcec	; 0xcec <__udivmodsi4>
 7ac:	c2 2f       	mov	r28, r18
 7ae:	d3 2f       	mov	r29, r19
 7b0:	14 2f       	mov	r17, r20
 7b2:	05 2f       	mov	r16, r21
		   
		   frequency = 8000000 /(ICU_ReadCapturedVal_3 - ICU_ReadCapturedVal_1);
		   
		   LCD_MoveTo(0,0);
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_MoveTo>
		   
		   LCD_WriteString("Duty Cycle :");
 7bc:	c3 01       	movw	r24, r6
 7be:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_WriteString>
		   
		   LCD_WriteInteger(Duty);
 7c2:	6c 2f       	mov	r22, r28
 7c4:	7d 2f       	mov	r23, r29
 7c6:	81 2f       	mov	r24, r17
 7c8:	90 2f       	mov	r25, r16
 7ca:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_WriteInteger>
		   
		   LCD_WRITE_CHARACHTER('%');
 7ce:	85 e2       	ldi	r24, 0x25	; 37
 7d0:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_WRITE_CHARACHTER>
		   
		   LCD_MoveTo(1,0);
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	0e 94 e5 02 	call	0x5ca	; 0x5ca <LCD_MoveTo>
		   
		   LCD_WriteString("Freq. :");
 7dc:	c2 01       	movw	r24, r4
 7de:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_WriteString>
    {
       if (Cap_Counter == 3)
       {
		   Duty =((ICU_ReadCapturedVal_2 - ICU_ReadCapturedVal_1) * 100) / (ICU_ReadCapturedVal_3 - ICU_ReadCapturedVal_1);
		   
		   frequency = 8000000 /(ICU_ReadCapturedVal_3 - ICU_ReadCapturedVal_1);
 7e2:	c5 01       	movw	r24, r10
 7e4:	b4 01       	movw	r22, r8
 7e6:	a7 01       	movw	r20, r14
 7e8:	96 01       	movw	r18, r12
 7ea:	0e 94 76 06 	call	0xcec	; 0xcec <__udivmodsi4>
		   
		   LCD_MoveTo(1,0);
		   
		   LCD_WriteString("Freq. :");
		   
		   LCD_WriteInteger(frequency);
 7ee:	ca 01       	movw	r24, r20
 7f0:	b9 01       	movw	r22, r18
 7f2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_WriteInteger>
		   
		   LCD_WriteString("Hz");
 7f6:	c1 01       	movw	r24, r2
 7f8:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_WriteString>
		   
		   Cap_Counter = 0;
 7fc:	10 92 78 00 	sts	0x0078, r1
		   
		   Set_bit(TIMSK,5);
 800:	89 b7       	in	r24, 0x39	; 57
 802:	80 62       	ori	r24, 0x20	; 32
 804:	89 bf       	out	0x39, r24	; 57
 806:	9f cf       	rjmp	.-194    	; 0x746 <main+0x50>
 808:	ff cf       	rjmp	.-2      	; 0x808 <main+0x112>

0000080a <Timer0_Init>:
{
	#if TIMER0_MODE==NORMAL
	
	/*Initialize Timer 0  as Normal mode */
	
	TCCR0 |= 0x00 ;
 80a:	83 b7       	in	r24, 0x33	; 51
 80c:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= 0x01;
 80e:	89 b7       	in	r24, 0x39	; 57
 810:	81 60       	ori	r24, 0x01	; 1
 812:	89 bf       	out	0x39, r24	; 57

	SREG |= 0x80;
 814:	8f b7       	in	r24, 0x3f	; 63
 816:	80 68       	ori	r24, 0x80	; 128
 818:	8f bf       	out	0x3f, r24	; 63
	Set_bit(TCCR0,3);
	SREG |=0x80;
	Set_bit(TIMSK,1);
	
	#endif
}
 81a:	08 95       	ret

0000081c <Timer0_Start>:
void Timer0_Start(void)
{
	
	/* start timer with prescaller   1024 */
	
	TCCR0 |= 0x05;
 81c:	83 b7       	in	r24, 0x33	; 51
 81e:	85 60       	ori	r24, 0x05	; 5
 820:	83 bf       	out	0x33, r24	; 51
	
}
 822:	08 95       	ret

00000824 <Timer0_Stop>:

void Timer0_Stop(void)
{
	
	Clr_bit(TCCR0,0);
 824:	83 b7       	in	r24, 0x33	; 51
 826:	8e 7f       	andi	r24, 0xFE	; 254
 828:	83 bf       	out	0x33, r24	; 51
	Clr_bit(TCCR0,1);
 82a:	83 b7       	in	r24, 0x33	; 51
 82c:	8d 7f       	andi	r24, 0xFD	; 253
 82e:	83 bf       	out	0x33, r24	; 51
	Clr_bit(TCCR0,2);
 830:	83 b7       	in	r24, 0x33	; 51
 832:	8b 7f       	andi	r24, 0xFB	; 251
 834:	83 bf       	out	0x33, r24	; 51
	
}
 836:	08 95       	ret

00000838 <Timer0_SetDelay>:
	
	
	/* tick time in micro second */
	uint8 Tick_Time_us = (1024 / 16);
	
	uint32 Total_Ticks = (Delay_Ms * 1000) / Tick_Time_us;
 838:	28 ee       	ldi	r18, 0xE8	; 232
 83a:	33 e0       	ldi	r19, 0x03	; 3
 83c:	40 e0       	ldi	r20, 0x00	; 0
 83e:	50 e0       	ldi	r21, 0x00	; 0
 840:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsi3>
 844:	dc 01       	movw	r26, r24
 846:	cb 01       	movw	r24, r22
 848:	68 94       	set
 84a:	15 f8       	bld	r1, 5
 84c:	b6 95       	lsr	r27
 84e:	a7 95       	ror	r26
 850:	97 95       	ror	r25
 852:	87 95       	ror	r24
 854:	16 94       	lsr	r1
 856:	d1 f7       	brne	.-12     	; 0x84c <Timer0_SetDelay+0x14>
	
	#if TIMER0_MODE==NORMAL
	
	Number_OverFlows = Total_Ticks / 256 ;
 858:	49 2f       	mov	r20, r25
 85a:	5a 2f       	mov	r21, r26
 85c:	6b 2f       	mov	r22, r27
 85e:	77 27       	eor	r23, r23
	
	CounterRegister_InitValue = 256 - (Total_Ticks % 256) ; //256 - ((  ((float) Total_Ticks / 256 ) - Number_OverFlows ) * 256 );
 860:	81 95       	neg	r24
 862:	80 93 90 00 	sts	0x0090, r24
	
	
	TCNT0 = CounterRegister_InitValue ;
 866:	82 bf       	out	0x32, r24	; 50
	
	Number_OverFlows ++;
 868:	db 01       	movw	r26, r22
 86a:	ca 01       	movw	r24, r20
 86c:	01 96       	adiw	r24, 0x01	; 1
 86e:	a1 1d       	adc	r26, r1
 870:	b1 1d       	adc	r27, r1
 872:	80 93 8c 00 	sts	0x008C, r24
 876:	90 93 8d 00 	sts	0x008D, r25
 87a:	a0 93 8e 00 	sts	0x008E, r26
 87e:	b0 93 8f 00 	sts	0x008F, r27
		Num0_ComMatch=1;
	}
	
	
	#endif
}
 882:	08 95       	ret

00000884 <timer0_SetCallBack>:


void timer0_SetCallBack(void (*ptr)(void))
{
	timer0_ptr_function = ptr;
 884:	90 93 92 00 	sts	0x0092, r25
 888:	80 93 91 00 	sts	0x0091, r24
}
 88c:	08 95       	ret

0000088e <__vector_11>:


#if TIMER0_MODE==NORMAL 
ISR(TIMER0_OVF_vect)
{
 88e:	1f 92       	push	r1
 890:	0f 92       	push	r0
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	0f 92       	push	r0
 896:	11 24       	eor	r1, r1
 898:	2f 93       	push	r18
 89a:	3f 93       	push	r19
 89c:	4f 93       	push	r20
 89e:	5f 93       	push	r21
 8a0:	6f 93       	push	r22
 8a2:	7f 93       	push	r23
 8a4:	8f 93       	push	r24
 8a6:	9f 93       	push	r25
 8a8:	af 93       	push	r26
 8aa:	bf 93       	push	r27
 8ac:	ef 93       	push	r30
 8ae:	ff 93       	push	r31
	
	static uint32 counter = 0;
	
	counter++;
 8b0:	80 91 93 00 	lds	r24, 0x0093
 8b4:	90 91 94 00 	lds	r25, 0x0094
 8b8:	a0 91 95 00 	lds	r26, 0x0095
 8bc:	b0 91 96 00 	lds	r27, 0x0096
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	a1 1d       	adc	r26, r1
 8c4:	b1 1d       	adc	r27, r1
 8c6:	80 93 93 00 	sts	0x0093, r24
 8ca:	90 93 94 00 	sts	0x0094, r25
 8ce:	a0 93 95 00 	sts	0x0095, r26
 8d2:	b0 93 96 00 	sts	0x0096, r27
	
	if(counter == Number_OverFlows)
 8d6:	40 91 8c 00 	lds	r20, 0x008C
 8da:	50 91 8d 00 	lds	r21, 0x008D
 8de:	60 91 8e 00 	lds	r22, 0x008E
 8e2:	70 91 8f 00 	lds	r23, 0x008F
 8e6:	84 17       	cp	r24, r20
 8e8:	95 07       	cpc	r25, r21
 8ea:	a6 07       	cpc	r26, r22
 8ec:	b7 07       	cpc	r27, r23
 8ee:	81 f4       	brne	.+32     	; 0x910 <__vector_11+0x82>
	{
		TCNT0 = CounterRegister_InitValue;
 8f0:	80 91 90 00 	lds	r24, 0x0090
 8f4:	82 bf       	out	0x32, r24	; 50
		
		counter = 0;
 8f6:	10 92 93 00 	sts	0x0093, r1
 8fa:	10 92 94 00 	sts	0x0094, r1
 8fe:	10 92 95 00 	sts	0x0095, r1
 902:	10 92 96 00 	sts	0x0096, r1
		
		(*timer0_ptr_function)();  //why should we put the pointer between parentheses?
 906:	e0 91 91 00 	lds	r30, 0x0091
 90a:	f0 91 92 00 	lds	r31, 0x0092
 90e:	09 95       	icall
		
	}
	
	
}
 910:	ff 91       	pop	r31
 912:	ef 91       	pop	r30
 914:	bf 91       	pop	r27
 916:	af 91       	pop	r26
 918:	9f 91       	pop	r25
 91a:	8f 91       	pop	r24
 91c:	7f 91       	pop	r23
 91e:	6f 91       	pop	r22
 920:	5f 91       	pop	r21
 922:	4f 91       	pop	r20
 924:	3f 91       	pop	r19
 926:	2f 91       	pop	r18
 928:	0f 90       	pop	r0
 92a:	0f be       	out	0x3f, r0	; 63
 92c:	0f 90       	pop	r0
 92e:	1f 90       	pop	r1
 930:	18 95       	reti

00000932 <Timer1_Init>:



void Timer1_Init(void)
{
	TCCR1B|= 0x08;
 932:	8e b5       	in	r24, 0x2e	; 46
 934:	88 60       	ori	r24, 0x08	; 8
 936:	8e bd       	out	0x2e, r24	; 46
	TIMSK|= 0x10;
 938:	89 b7       	in	r24, 0x39	; 57
 93a:	80 61       	ori	r24, 0x10	; 16
 93c:	89 bf       	out	0x39, r24	; 57
	SREG|= 0x80;
 93e:	8f b7       	in	r24, 0x3f	; 63
 940:	80 68       	ori	r24, 0x80	; 128
 942:	8f bf       	out	0x3f, r24	; 63
	
}
 944:	08 95       	ret

00000946 <Timer1_Start>:

void Timer1_Start(void)
{
	// Enable prescaler 1024
	TCCR1B|= 0x05;
 946:	8e b5       	in	r24, 0x2e	; 46
 948:	85 60       	ori	r24, 0x05	; 5
 94a:	8e bd       	out	0x2e, r24	; 46
	
}
 94c:	08 95       	ret

0000094e <Timer1_Stop>:

void Timer1_Stop(void)
{
	Clr_bit(TCCR1B,0);
 94e:	8e b5       	in	r24, 0x2e	; 46
 950:	8e 7f       	andi	r24, 0xFE	; 254
 952:	8e bd       	out	0x2e, r24	; 46
	Clr_bit(TCCR1B,1);
 954:	8e b5       	in	r24, 0x2e	; 46
 956:	8d 7f       	andi	r24, 0xFD	; 253
 958:	8e bd       	out	0x2e, r24	; 46
	Clr_bit(TCCR1B,2);
 95a:	8e b5       	in	r24, 0x2e	; 46
 95c:	8b 7f       	andi	r24, 0xFB	; 251
 95e:	8e bd       	out	0x2e, r24	; 46
}
 960:	08 95       	ret

00000962 <Timer1_SetDelay>:

void Timer1_SetDelay(uint32 Delay_Ms)
{
	if(Delay_Ms < 4000)
 962:	60 3a       	cpi	r22, 0xA0	; 160
 964:	2f e0       	ldi	r18, 0x0F	; 15
 966:	72 07       	cpc	r23, r18
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	82 07       	cpc	r24, r18
 96c:	20 e0       	ldi	r18, 0x00	; 0
 96e:	92 07       	cpc	r25, r18
 970:	f8 f4       	brcc	.+62     	; 0x9b0 <Timer1_SetDelay+0x4e>
	{
		
	uint8 tick_time=1024/16;
	uint32 Num_Ticks =(Delay_Ms *1000) / tick_time;
 972:	28 ee       	ldi	r18, 0xE8	; 232
 974:	33 e0       	ldi	r19, 0x03	; 3
 976:	40 e0       	ldi	r20, 0x00	; 0
 978:	50 e0       	ldi	r21, 0x00	; 0
 97a:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsi3>
 97e:	dc 01       	movw	r26, r24
 980:	cb 01       	movw	r24, r22
 982:	68 94       	set
 984:	15 f8       	bld	r1, 5
 986:	b6 95       	lsr	r27
 988:	a7 95       	ror	r26
 98a:	97 95       	ror	r25
 98c:	87 95       	ror	r24
 98e:	16 94       	lsr	r1
 990:	d1 f7       	brne	.-12     	; 0x986 <Timer1_SetDelay+0x24>
	
	OCR1A = Num_Ticks -1;
 992:	01 97       	sbiw	r24, 0x01	; 1
 994:	9b bd       	out	0x2b, r25	; 43
 996:	8a bd       	out	0x2a, r24	; 42
	
	Num_ComMatch =1;
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	a0 e0       	ldi	r26, 0x00	; 0
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	80 93 88 00 	sts	0x0088, r24
 9a4:	90 93 89 00 	sts	0x0089, r25
 9a8:	a0 93 8a 00 	sts	0x008A, r26
 9ac:	b0 93 8b 00 	sts	0x008B, r27
 9b0:	08 95       	ret

000009b2 <timer1_SetCallBack>:
	}	
}

void timer1_SetCallBack(void (*ptr)(void))
{
	timer1_ptr_function = ptr;
 9b2:	90 93 98 00 	sts	0x0098, r25
 9b6:	80 93 97 00 	sts	0x0097, r24
}
 9ba:	08 95       	ret

000009bc <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
 9bc:	1f 92       	push	r1
 9be:	0f 92       	push	r0
 9c0:	0f b6       	in	r0, 0x3f	; 63
 9c2:	0f 92       	push	r0
 9c4:	11 24       	eor	r1, r1
 9c6:	2f 93       	push	r18
 9c8:	3f 93       	push	r19
 9ca:	4f 93       	push	r20
 9cc:	5f 93       	push	r21
 9ce:	6f 93       	push	r22
 9d0:	7f 93       	push	r23
 9d2:	8f 93       	push	r24
 9d4:	9f 93       	push	r25
 9d6:	af 93       	push	r26
 9d8:	bf 93       	push	r27
 9da:	ef 93       	push	r30
 9dc:	ff 93       	push	r31
	static uint32 counter =0;
	counter++;
 9de:	80 91 99 00 	lds	r24, 0x0099
 9e2:	90 91 9a 00 	lds	r25, 0x009A
 9e6:	a0 91 9b 00 	lds	r26, 0x009B
 9ea:	b0 91 9c 00 	lds	r27, 0x009C
 9ee:	01 96       	adiw	r24, 0x01	; 1
 9f0:	a1 1d       	adc	r26, r1
 9f2:	b1 1d       	adc	r27, r1
 9f4:	80 93 99 00 	sts	0x0099, r24
 9f8:	90 93 9a 00 	sts	0x009A, r25
 9fc:	a0 93 9b 00 	sts	0x009B, r26
 a00:	b0 93 9c 00 	sts	0x009C, r27
	if (counter == Num_ComMatch)
 a04:	40 91 88 00 	lds	r20, 0x0088
 a08:	50 91 89 00 	lds	r21, 0x0089
 a0c:	60 91 8a 00 	lds	r22, 0x008A
 a10:	70 91 8b 00 	lds	r23, 0x008B
 a14:	84 17       	cp	r24, r20
 a16:	95 07       	cpc	r25, r21
 a18:	a6 07       	cpc	r26, r22
 a1a:	b7 07       	cpc	r27, r23
 a1c:	69 f4       	brne	.+26     	; 0xa38 <__vector_7+0x7c>
	{
		counter =0;
 a1e:	10 92 99 00 	sts	0x0099, r1
 a22:	10 92 9a 00 	sts	0x009A, r1
 a26:	10 92 9b 00 	sts	0x009B, r1
 a2a:	10 92 9c 00 	sts	0x009C, r1
		(*timer1_ptr_function)();
 a2e:	e0 91 97 00 	lds	r30, 0x0097
 a32:	f0 91 98 00 	lds	r31, 0x0098
 a36:	09 95       	icall
	}
	
}
 a38:	ff 91       	pop	r31
 a3a:	ef 91       	pop	r30
 a3c:	bf 91       	pop	r27
 a3e:	af 91       	pop	r26
 a40:	9f 91       	pop	r25
 a42:	8f 91       	pop	r24
 a44:	7f 91       	pop	r23
 a46:	6f 91       	pop	r22
 a48:	5f 91       	pop	r21
 a4a:	4f 91       	pop	r20
 a4c:	3f 91       	pop	r19
 a4e:	2f 91       	pop	r18
 a50:	0f 90       	pop	r0
 a52:	0f be       	out	0x3f, r0	; 63
 a54:	0f 90       	pop	r0
 a56:	1f 90       	pop	r1
 a58:	18 95       	reti

00000a5a <PWM0_INIT>:


void PWM0_INIT(void)
{
	//setting pwm mode
	TCCR0 |= 0x48;
 a5a:	83 b7       	in	r24, 0x33	; 51
 a5c:	88 64       	ori	r24, 0x48	; 72
 a5e:	83 bf       	out	0x33, r24	; 51
	//setting non inverted mode
	TCCR0 |= 0x20;
 a60:	83 b7       	in	r24, 0x33	; 51
 a62:	80 62       	ori	r24, 0x20	; 32
 a64:	83 bf       	out	0x33, r24	; 51
}
 a66:	08 95       	ret

00000a68 <PWM0_Generate>:

void PWM0_Generate(uint16 Duty_Cycle)
{
	OCR0 =( (Duty_Cycle * 256)/100) - 1;
 a68:	38 2f       	mov	r19, r24
 a6a:	20 e0       	ldi	r18, 0x00	; 0
 a6c:	c9 01       	movw	r24, r18
 a6e:	64 e6       	ldi	r22, 0x64	; 100
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__udivmodhi4>
 a76:	61 50       	subi	r22, 0x01	; 1
 a78:	6c bf       	out	0x3c, r22	; 60
}
 a7a:	08 95       	ret

00000a7c <PWM0_Start>:

void PWM0_Start(void)
{
	TCCR0 |= 0x03;
 a7c:	83 b7       	in	r24, 0x33	; 51
 a7e:	83 60       	ori	r24, 0x03	; 3
 a80:	83 bf       	out	0x33, r24	; 51
}
 a82:	08 95       	ret

00000a84 <PWM1_INIT>:

void PWM1_INIT(void)
{
	TCCR1A |= 0x82;
 a84:	8f b5       	in	r24, 0x2f	; 47
 a86:	82 68       	ori	r24, 0x82	; 130
 a88:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B |= 0x1c;
 a8a:	8e b5       	in	r24, 0x2e	; 46
 a8c:	8c 61       	ori	r24, 0x1C	; 28
 a8e:	8e bd       	out	0x2e, r24	; 46
	//652
	ICR1 = 1250;
 a90:	82 ee       	ldi	r24, 0xE2	; 226
 a92:	94 e0       	ldi	r25, 0x04	; 4
 a94:	97 bd       	out	0x27, r25	; 39
 a96:	86 bd       	out	0x26, r24	; 38
}
 a98:	08 95       	ret

00000a9a <PWM1_Generate>:

void PWM1_Generate(uint8 Duty_Cycle)
{
	OCR1A = ( (Duty_Cycle * 1250 ) / 100 ) -1; // 1250 DETERMINED BY ME.
 a9a:	48 2f       	mov	r20, r24
 a9c:	50 e0       	ldi	r21, 0x00	; 0
 a9e:	22 ee       	ldi	r18, 0xE2	; 226
 aa0:	34 e0       	ldi	r19, 0x04	; 4
 aa2:	42 9f       	mul	r20, r18
 aa4:	c0 01       	movw	r24, r0
 aa6:	43 9f       	mul	r20, r19
 aa8:	90 0d       	add	r25, r0
 aaa:	52 9f       	mul	r21, r18
 aac:	90 0d       	add	r25, r0
 aae:	11 24       	eor	r1, r1
 ab0:	64 e6       	ldi	r22, 0x64	; 100
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__divmodhi4>
 ab8:	61 50       	subi	r22, 0x01	; 1
 aba:	70 40       	sbci	r23, 0x00	; 0
 abc:	7b bd       	out	0x2b, r23	; 43
 abe:	6a bd       	out	0x2a, r22	; 42
}
 ac0:	08 95       	ret

00000ac2 <PWM1_Start>:

void PWM1_Start()
{
	TCCR1B |=0x04;
 ac2:	8e b5       	in	r24, 0x2e	; 46
 ac4:	84 60       	ori	r24, 0x04	; 4
 ac6:	8e bd       	out	0x2e, r24	; 46
}
 ac8:	08 95       	ret

00000aca <ICU_Init>:

void ICU_Init(void)
{
	Set_bit(DDRB,7);
 aca:	bf 9a       	sbi	0x17, 7	; 23
	Clr_bit(DDRD,6);
 acc:	8e 98       	cbi	0x11, 6	; 17
	ICR1 = 0x0000;
 ace:	17 bc       	out	0x27, r1	; 39
 ad0:	16 bc       	out	0x26, r1	; 38
	TCCR1B |=0x41;
 ad2:	8e b5       	in	r24, 0x2e	; 46
 ad4:	81 64       	ori	r24, 0x41	; 65
 ad6:	8e bd       	out	0x2e, r24	; 46
	
	TIMSK |= 0x24;
 ad8:	89 b7       	in	r24, 0x39	; 57
 ada:	84 62       	ori	r24, 0x24	; 36
 adc:	89 bf       	out	0x39, r24	; 57
	SREG |= 0x80;
 ade:	8f b7       	in	r24, 0x3f	; 63
 ae0:	80 68       	ori	r24, 0x80	; 128
 ae2:	8f bf       	out	0x3f, r24	; 63
}
 ae4:	08 95       	ret

00000ae6 <PWM2_Init>:

void PWM2_Init(void)
{
	//PWM FREUENCY 3906 Hz
	DDRD |=0x80;
 ae6:	8f 9a       	sbi	0x11, 7	; 17
	TCCR2 |=0x6A;
 ae8:	85 b5       	in	r24, 0x25	; 37
 aea:	8a 66       	ori	r24, 0x6A	; 106
 aec:	85 bd       	out	0x25, r24	; 37
}
 aee:	08 95       	ret

00000af0 <PWM2_generate>:

void PWM2_generate (uint32 Duty_Cycle)
{
	OCR2 = ((Duty_Cycle * 256)/100);
 af0:	98 2f       	mov	r25, r24
 af2:	87 2f       	mov	r24, r23
 af4:	76 2f       	mov	r23, r22
 af6:	66 27       	eor	r22, r22
 af8:	24 e6       	ldi	r18, 0x64	; 100
 afa:	30 e0       	ldi	r19, 0x00	; 0
 afc:	40 e0       	ldi	r20, 0x00	; 0
 afe:	50 e0       	ldi	r21, 0x00	; 0
 b00:	0e 94 76 06 	call	0xcec	; 0xcec <__udivmodsi4>
 b04:	23 bd       	out	0x23, r18	; 35
}
 b06:	08 95       	ret

00000b08 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
 b08:	1f 92       	push	r1
 b0a:	0f 92       	push	r0
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	0f 92       	push	r0
 b10:	11 24       	eor	r1, r1
 b12:	8f 93       	push	r24
 b14:	9f 93       	push	r25
	Timer1_Number_overflow++;
 b16:	80 91 85 00 	lds	r24, 0x0085
 b1a:	90 91 86 00 	lds	r25, 0x0086
 b1e:	01 96       	adiw	r24, 0x01	; 1
 b20:	90 93 86 00 	sts	0x0086, r25
 b24:	80 93 85 00 	sts	0x0085, r24
}
 b28:	9f 91       	pop	r25
 b2a:	8f 91       	pop	r24
 b2c:	0f 90       	pop	r0
 b2e:	0f be       	out	0x3f, r0	; 63
 b30:	0f 90       	pop	r0
 b32:	1f 90       	pop	r1
 b34:	18 95       	reti

00000b36 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
 b36:	1f 92       	push	r1
 b38:	0f 92       	push	r0
 b3a:	0f b6       	in	r0, 0x3f	; 63
 b3c:	0f 92       	push	r0
 b3e:	11 24       	eor	r1, r1
 b40:	cf 92       	push	r12
 b42:	df 92       	push	r13
 b44:	ef 92       	push	r14
 b46:	ff 92       	push	r15
 b48:	2f 93       	push	r18
 b4a:	3f 93       	push	r19
 b4c:	4f 93       	push	r20
 b4e:	5f 93       	push	r21
 b50:	6f 93       	push	r22
 b52:	7f 93       	push	r23
 b54:	8f 93       	push	r24
 b56:	9f 93       	push	r25
 b58:	af 93       	push	r26
 b5a:	bf 93       	push	r27
 b5c:	ef 93       	push	r30
 b5e:	ff 93       	push	r31
	Cap_Counter++;
 b60:	80 91 78 00 	lds	r24, 0x0078
 b64:	8f 5f       	subi	r24, 0xFF	; 255
 b66:	80 93 78 00 	sts	0x0078, r24
	
	if(Cap_Counter==1)
 b6a:	80 91 78 00 	lds	r24, 0x0078
 b6e:	81 30       	cpi	r24, 0x01	; 1
 b70:	a1 f4       	brne	.+40     	; 0xb9a <__vector_6+0x64>
	{
		ICU_ReadCapturedVal_1 = ICR1;
 b72:	86 b5       	in	r24, 0x26	; 38
 b74:	97 b5       	in	r25, 0x27	; 39
 b76:	a0 e0       	ldi	r26, 0x00	; 0
 b78:	b0 e0       	ldi	r27, 0x00	; 0
 b7a:	80 93 81 00 	sts	0x0081, r24
 b7e:	90 93 82 00 	sts	0x0082, r25
 b82:	a0 93 83 00 	sts	0x0083, r26
 b86:	b0 93 84 00 	sts	0x0084, r27
		Timer1_Number_overflow=0;
 b8a:	10 92 86 00 	sts	0x0086, r1
 b8e:	10 92 85 00 	sts	0x0085, r1
		Clr_bit(TCCR1B,6); //Detect Falling Edge
 b92:	8e b5       	in	r24, 0x2e	; 46
 b94:	8f 7b       	andi	r24, 0xBF	; 191
 b96:	8e bd       	out	0x2e, r24	; 46
 b98:	4e c0       	rjmp	.+156    	; 0xc36 <__vector_6+0x100>
	}
	else if (Cap_Counter==2)
 b9a:	80 91 78 00 	lds	r24, 0x0078
 b9e:	82 30       	cpi	r24, 0x02	; 2
 ba0:	11 f5       	brne	.+68     	; 0xbe6 <__vector_6+0xb0>
	{
		ICU_ReadCapturedVal_2 = ICR1 +(Timer1_Number_overflow * 65535);
 ba2:	c6 b4       	in	r12, 0x26	; 38
 ba4:	d7 b4       	in	r13, 0x27	; 39
 ba6:	60 91 85 00 	lds	r22, 0x0085
 baa:	70 91 86 00 	lds	r23, 0x0086
 bae:	ee 24       	eor	r14, r14
 bb0:	ff 24       	eor	r15, r15
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	2f ef       	ldi	r18, 0xFF	; 255
 bb8:	3f ef       	ldi	r19, 0xFF	; 255
 bba:	40 e0       	ldi	r20, 0x00	; 0
 bbc:	50 e0       	ldi	r21, 0x00	; 0
 bbe:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsi3>
 bc2:	dc 01       	movw	r26, r24
 bc4:	cb 01       	movw	r24, r22
 bc6:	c8 0e       	add	r12, r24
 bc8:	d9 1e       	adc	r13, r25
 bca:	ea 1e       	adc	r14, r26
 bcc:	fb 1e       	adc	r15, r27
 bce:	c0 92 7d 00 	sts	0x007D, r12
 bd2:	d0 92 7e 00 	sts	0x007E, r13
 bd6:	e0 92 7f 00 	sts	0x007F, r14
 bda:	f0 92 80 00 	sts	0x0080, r15
		Set_bit(TCCR1B,6); //Detect Falling Edge
 bde:	8e b5       	in	r24, 0x2e	; 46
 be0:	80 64       	ori	r24, 0x40	; 64
 be2:	8e bd       	out	0x2e, r24	; 46
 be4:	28 c0       	rjmp	.+80     	; 0xc36 <__vector_6+0x100>
		
	}
	else if (Cap_Counter==3)
 be6:	80 91 78 00 	lds	r24, 0x0078
 bea:	83 30       	cpi	r24, 0x03	; 3
 bec:	21 f5       	brne	.+72     	; 0xc36 <__vector_6+0x100>
	{
		ICU_ReadCapturedVal_3 = ICR1 + (Timer1_Number_overflow * 65535);
 bee:	c6 b4       	in	r12, 0x26	; 38
 bf0:	d7 b4       	in	r13, 0x27	; 39
 bf2:	60 91 85 00 	lds	r22, 0x0085
 bf6:	70 91 86 00 	lds	r23, 0x0086
 bfa:	ee 24       	eor	r14, r14
 bfc:	ff 24       	eor	r15, r15
 bfe:	80 e0       	ldi	r24, 0x00	; 0
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	2f ef       	ldi	r18, 0xFF	; 255
 c04:	3f ef       	ldi	r19, 0xFF	; 255
 c06:	40 e0       	ldi	r20, 0x00	; 0
 c08:	50 e0       	ldi	r21, 0x00	; 0
 c0a:	0e 94 30 06 	call	0xc60	; 0xc60 <__mulsi3>
 c0e:	dc 01       	movw	r26, r24
 c10:	cb 01       	movw	r24, r22
 c12:	c8 0e       	add	r12, r24
 c14:	d9 1e       	adc	r13, r25
 c16:	ea 1e       	adc	r14, r26
 c18:	fb 1e       	adc	r15, r27
 c1a:	c0 92 79 00 	sts	0x0079, r12
 c1e:	d0 92 7a 00 	sts	0x007A, r13
 c22:	e0 92 7b 00 	sts	0x007B, r14
 c26:	f0 92 7c 00 	sts	0x007C, r15
		Clr_bit(TCCR1B,6);
 c2a:	8e b5       	in	r24, 0x2e	; 46
 c2c:	8f 7b       	andi	r24, 0xBF	; 191
 c2e:	8e bd       	out	0x2e, r24	; 46
		Clr_bit(TIMSK,5);
 c30:	89 b7       	in	r24, 0x39	; 57
 c32:	8f 7d       	andi	r24, 0xDF	; 223
 c34:	89 bf       	out	0x39, r24	; 57
	}
	
}
 c36:	ff 91       	pop	r31
 c38:	ef 91       	pop	r30
 c3a:	bf 91       	pop	r27
 c3c:	af 91       	pop	r26
 c3e:	9f 91       	pop	r25
 c40:	8f 91       	pop	r24
 c42:	7f 91       	pop	r23
 c44:	6f 91       	pop	r22
 c46:	5f 91       	pop	r21
 c48:	4f 91       	pop	r20
 c4a:	3f 91       	pop	r19
 c4c:	2f 91       	pop	r18
 c4e:	ff 90       	pop	r15
 c50:	ef 90       	pop	r14
 c52:	df 90       	pop	r13
 c54:	cf 90       	pop	r12
 c56:	0f 90       	pop	r0
 c58:	0f be       	out	0x3f, r0	; 63
 c5a:	0f 90       	pop	r0
 c5c:	1f 90       	pop	r1
 c5e:	18 95       	reti

00000c60 <__mulsi3>:
 c60:	62 9f       	mul	r22, r18
 c62:	d0 01       	movw	r26, r0
 c64:	73 9f       	mul	r23, r19
 c66:	f0 01       	movw	r30, r0
 c68:	82 9f       	mul	r24, r18
 c6a:	e0 0d       	add	r30, r0
 c6c:	f1 1d       	adc	r31, r1
 c6e:	64 9f       	mul	r22, r20
 c70:	e0 0d       	add	r30, r0
 c72:	f1 1d       	adc	r31, r1
 c74:	92 9f       	mul	r25, r18
 c76:	f0 0d       	add	r31, r0
 c78:	83 9f       	mul	r24, r19
 c7a:	f0 0d       	add	r31, r0
 c7c:	74 9f       	mul	r23, r20
 c7e:	f0 0d       	add	r31, r0
 c80:	65 9f       	mul	r22, r21
 c82:	f0 0d       	add	r31, r0
 c84:	99 27       	eor	r25, r25
 c86:	72 9f       	mul	r23, r18
 c88:	b0 0d       	add	r27, r0
 c8a:	e1 1d       	adc	r30, r1
 c8c:	f9 1f       	adc	r31, r25
 c8e:	63 9f       	mul	r22, r19
 c90:	b0 0d       	add	r27, r0
 c92:	e1 1d       	adc	r30, r1
 c94:	f9 1f       	adc	r31, r25
 c96:	bd 01       	movw	r22, r26
 c98:	cf 01       	movw	r24, r30
 c9a:	11 24       	eor	r1, r1
 c9c:	08 95       	ret

00000c9e <__udivmodhi4>:
 c9e:	aa 1b       	sub	r26, r26
 ca0:	bb 1b       	sub	r27, r27
 ca2:	51 e1       	ldi	r21, 0x11	; 17
 ca4:	07 c0       	rjmp	.+14     	; 0xcb4 <__udivmodhi4_ep>

00000ca6 <__udivmodhi4_loop>:
 ca6:	aa 1f       	adc	r26, r26
 ca8:	bb 1f       	adc	r27, r27
 caa:	a6 17       	cp	r26, r22
 cac:	b7 07       	cpc	r27, r23
 cae:	10 f0       	brcs	.+4      	; 0xcb4 <__udivmodhi4_ep>
 cb0:	a6 1b       	sub	r26, r22
 cb2:	b7 0b       	sbc	r27, r23

00000cb4 <__udivmodhi4_ep>:
 cb4:	88 1f       	adc	r24, r24
 cb6:	99 1f       	adc	r25, r25
 cb8:	5a 95       	dec	r21
 cba:	a9 f7       	brne	.-22     	; 0xca6 <__udivmodhi4_loop>
 cbc:	80 95       	com	r24
 cbe:	90 95       	com	r25
 cc0:	bc 01       	movw	r22, r24
 cc2:	cd 01       	movw	r24, r26
 cc4:	08 95       	ret

00000cc6 <__divmodhi4>:
 cc6:	97 fb       	bst	r25, 7
 cc8:	09 2e       	mov	r0, r25
 cca:	07 26       	eor	r0, r23
 ccc:	0a d0       	rcall	.+20     	; 0xce2 <__divmodhi4_neg1>
 cce:	77 fd       	sbrc	r23, 7
 cd0:	04 d0       	rcall	.+8      	; 0xcda <__divmodhi4_neg2>
 cd2:	e5 df       	rcall	.-54     	; 0xc9e <__udivmodhi4>
 cd4:	06 d0       	rcall	.+12     	; 0xce2 <__divmodhi4_neg1>
 cd6:	00 20       	and	r0, r0
 cd8:	1a f4       	brpl	.+6      	; 0xce0 <__divmodhi4_exit>

00000cda <__divmodhi4_neg2>:
 cda:	70 95       	com	r23
 cdc:	61 95       	neg	r22
 cde:	7f 4f       	sbci	r23, 0xFF	; 255

00000ce0 <__divmodhi4_exit>:
 ce0:	08 95       	ret

00000ce2 <__divmodhi4_neg1>:
 ce2:	f6 f7       	brtc	.-4      	; 0xce0 <__divmodhi4_exit>
 ce4:	90 95       	com	r25
 ce6:	81 95       	neg	r24
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	08 95       	ret

00000cec <__udivmodsi4>:
 cec:	a1 e2       	ldi	r26, 0x21	; 33
 cee:	1a 2e       	mov	r1, r26
 cf0:	aa 1b       	sub	r26, r26
 cf2:	bb 1b       	sub	r27, r27
 cf4:	fd 01       	movw	r30, r26
 cf6:	0d c0       	rjmp	.+26     	; 0xd12 <__udivmodsi4_ep>

00000cf8 <__udivmodsi4_loop>:
 cf8:	aa 1f       	adc	r26, r26
 cfa:	bb 1f       	adc	r27, r27
 cfc:	ee 1f       	adc	r30, r30
 cfe:	ff 1f       	adc	r31, r31
 d00:	a2 17       	cp	r26, r18
 d02:	b3 07       	cpc	r27, r19
 d04:	e4 07       	cpc	r30, r20
 d06:	f5 07       	cpc	r31, r21
 d08:	20 f0       	brcs	.+8      	; 0xd12 <__udivmodsi4_ep>
 d0a:	a2 1b       	sub	r26, r18
 d0c:	b3 0b       	sbc	r27, r19
 d0e:	e4 0b       	sbc	r30, r20
 d10:	f5 0b       	sbc	r31, r21

00000d12 <__udivmodsi4_ep>:
 d12:	66 1f       	adc	r22, r22
 d14:	77 1f       	adc	r23, r23
 d16:	88 1f       	adc	r24, r24
 d18:	99 1f       	adc	r25, r25
 d1a:	1a 94       	dec	r1
 d1c:	69 f7       	brne	.-38     	; 0xcf8 <__udivmodsi4_loop>
 d1e:	60 95       	com	r22
 d20:	70 95       	com	r23
 d22:	80 95       	com	r24
 d24:	90 95       	com	r25
 d26:	9b 01       	movw	r18, r22
 d28:	ac 01       	movw	r20, r24
 d2a:	bd 01       	movw	r22, r26
 d2c:	cf 01       	movw	r24, r30
 d2e:	08 95       	ret

00000d30 <__divmodsi4>:
 d30:	97 fb       	bst	r25, 7
 d32:	09 2e       	mov	r0, r25
 d34:	05 26       	eor	r0, r21
 d36:	0e d0       	rcall	.+28     	; 0xd54 <__divmodsi4_neg1>
 d38:	57 fd       	sbrc	r21, 7
 d3a:	04 d0       	rcall	.+8      	; 0xd44 <__divmodsi4_neg2>
 d3c:	d7 df       	rcall	.-82     	; 0xcec <__udivmodsi4>
 d3e:	0a d0       	rcall	.+20     	; 0xd54 <__divmodsi4_neg1>
 d40:	00 1c       	adc	r0, r0
 d42:	38 f4       	brcc	.+14     	; 0xd52 <__divmodsi4_exit>

00000d44 <__divmodsi4_neg2>:
 d44:	50 95       	com	r21
 d46:	40 95       	com	r20
 d48:	30 95       	com	r19
 d4a:	21 95       	neg	r18
 d4c:	3f 4f       	sbci	r19, 0xFF	; 255
 d4e:	4f 4f       	sbci	r20, 0xFF	; 255
 d50:	5f 4f       	sbci	r21, 0xFF	; 255

00000d52 <__divmodsi4_exit>:
 d52:	08 95       	ret

00000d54 <__divmodsi4_neg1>:
 d54:	f6 f7       	brtc	.-4      	; 0xd52 <__divmodsi4_exit>
 d56:	90 95       	com	r25
 d58:	80 95       	com	r24
 d5a:	70 95       	com	r23
 d5c:	61 95       	neg	r22
 d5e:	7f 4f       	sbci	r23, 0xFF	; 255
 d60:	8f 4f       	sbci	r24, 0xFF	; 255
 d62:	9f 4f       	sbci	r25, 0xFF	; 255
 d64:	08 95       	ret

00000d66 <_exit>:
 d66:	f8 94       	cli

00000d68 <__stop_program>:
 d68:	ff cf       	rjmp	.-2      	; 0xd68 <__stop_program>
