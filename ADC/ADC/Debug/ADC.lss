
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000074e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000074e  000007c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000954  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000014d  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000120  00000000  00000000  00001268  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c35  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000471  00000000  00000000  00001fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000728  00000000  00000000  0000242e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00002b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000267  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d1  00000000  00000000  00002fa3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8a:	0c 94 a5 03 	jmp	0x74a	; 0x74a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_INIT>:

void ADC_INIT(void)
{
#if VOLTAGE_REFRENCE   ==    ADC_VREF_AVCC

SET_BIT(ADMUX,6);
  92:	3e 9a       	sbi	0x07, 6	; 7
CLR_BIT(ADMUX,7);
  94:	3f 98       	cbi	0x07, 7	; 7

CLR_BIT(ADMUX,0);

#elif ADC_CHANNEL       ==   ADC_CHANNEL_1

SET_BIT(ADMUX,0);
  96:	38 9a       	sbi	0x07, 0	; 7

#endif

#if VOLTAGE_ADJUCENT     ==  ADC_RIGHT_ADJUST

CLR_BIT(ADMUX,5);
  98:	3d 98       	cbi	0x07, 5	; 7

#endif

#if ADC_CONVERSION_TRIGGER== ADC_AUTO_TRIGGER

SET_BIT(ADCSRA,5);
  9a:	35 9a       	sbi	0x06, 5	; 6

#endif

#if ADC_PRESCALER     ==     ADC_PRESEC_128

SET_BIT(ADCSRA,0);
  9c:	30 9a       	sbi	0x06, 0	; 6
SET_BIT(ADCSRA,1);
  9e:	31 9a       	sbi	0x06, 1	; 6
SET_BIT(ADCSRA,2);
  a0:	32 9a       	sbi	0x06, 2	; 6

#endif

#if ADC_INTERRUPT_STATUS  == ADC_INTERRUPT_DISABLE

CLR_BIT(ADCSRA,3);
  a2:	33 98       	cbi	0x06, 3	; 6

#endif

/* Enable ADC */

SET_BIT(ADCSRA,7);
  a4:	37 9a       	sbi	0x06, 7	; 6
}
  a6:	08 95       	ret

000000a8 <ADC_READ>:

void ADC_READ(uint16* value)
{
  a8:	fc 01       	movw	r30, r24
	uint16 Digital_value=0;
	
	SET_BIT(ADCSRA,6);
  aa:	36 9a       	sbi	0x06, 6	; 6
	
	#if ADC_INTERRUPT_STATUS  == ADC_INTERRUPT_DISABLE
	
	while (! GET_BIT(ADCSRA,4));
  ac:	86 b1       	in	r24, 0x06	; 6
  ae:	84 ff       	sbrs	r24, 4
  b0:	fd cf       	rjmp	.-6      	; 0xac <ADC_READ+0x4>
	
	Digital_value=ADC_ADJUST;
  b2:	24 b1       	in	r18, 0x04	; 4
  b4:	35 b1       	in	r19, 0x05	; 5
	
	*value=((Digital_value *500)/1024);
  b6:	84 ef       	ldi	r24, 0xF4	; 244
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	28 9f       	mul	r18, r24
  bc:	a0 01       	movw	r20, r0
  be:	29 9f       	mul	r18, r25
  c0:	50 0d       	add	r21, r0
  c2:	38 9f       	mul	r19, r24
  c4:	50 0d       	add	r21, r0
  c6:	11 24       	eor	r1, r1
  c8:	85 2f       	mov	r24, r21
  ca:	86 95       	lsr	r24
  cc:	86 95       	lsr	r24
  ce:	80 83       	st	Z, r24
  d0:	11 82       	std	Z+1, r1	; 0x01
	
	#endif
	
  d2:	08 95       	ret

000000d4 <main>:
#include "Temp_sensor.h"
#define F_CPU 16000000
#include <util/delay.h>

int main(void)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	00 d0       	rcall	.+0      	; 0xda <main+0x6>
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
	uint16 temp=0;
  de:	1a 82       	std	Y+2, r1	; 0x02
  e0:	19 82       	std	Y+1, r1	; 0x01
	LCD_Init();
  e2:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_Init>
	TempsSensor_INIT();
  e6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <TempsSensor_INIT>
    while(1)
    {
        
        TempSensor_READ(&temp); 
  ea:	ce 01       	movw	r24, r28
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	0e 94 5d 03 	call	0x6ba	; 0x6ba <TempSensor_READ>
		
		LCD_Clear();
  f2:	0e 94 39 03 	call	0x672	; 0x672 <LCD_Clear>
		
		LCD_WriteInteger(temp);
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	0e 94 3d 03 	call	0x67a	; 0x67a <LCD_WriteInteger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	99 e6       	ldi	r25, 0x69	; 105
 102:	a8 e1       	ldi	r26, 0x18	; 24
 104:	81 50       	subi	r24, 0x01	; 1
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	a0 40       	sbci	r26, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x30>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x3a>
 10e:	00 00       	nop
 110:	ec cf       	rjmp	.-40     	; 0xea <main+0x16>

00000112 <DIO_SetPortDir>:

void DIO_SetPortDir(uint8 Port , uint8 Dir)
{


	switch(Port)
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	49 f0       	breq	.+18     	; 0x128 <DIO_SetPortDir+0x16>
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	28 f0       	brcs	.+10     	; 0x124 <DIO_SetPortDir+0x12>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	39 f0       	breq	.+14     	; 0x12c <DIO_SetPortDir+0x1a>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	41 f4       	brne	.+16     	; 0x132 <DIO_SetPortDir+0x20>
 122:	06 c0       	rjmp	.+12     	; 0x130 <DIO_SetPortDir+0x1e>
	{

	case DIO_PORTA :

		DDRA = Dir;
 124:	6a bb       	out	0x1a, r22	; 26

		break;
 126:	08 95       	ret

	case DIO_PORTB :

		DDRB = Dir;
 128:	67 bb       	out	0x17, r22	; 23

		break;
 12a:	08 95       	ret

	case DIO_PORTC :

		DDRC = Dir;
 12c:	64 bb       	out	0x14, r22	; 20

		break;
 12e:	08 95       	ret

	case DIO_PORTD :

		DDRD = Dir;
 130:	61 bb       	out	0x11, r22	; 17
 132:	08 95       	ret

00000134 <DIO_SetPinDir>:
void DIO_SetPinDir(uint8 Port ,uint8 Pin , uint8 Dir)
{



	switch (Dir)
 134:	44 23       	and	r20, r20
 136:	09 f4       	brne	.+2      	; 0x13a <DIO_SetPinDir+0x6>
 138:	41 c0       	rjmp	.+130    	; 0x1bc <DIO_SetPinDir+0x88>
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	09 f0       	breq	.+2      	; 0x140 <DIO_SetPinDir+0xc>
 13e:	7e c0       	rjmp	.+252    	; 0x23c <DIO_SetPinDir+0x108>


	case DIO_PIN_OUTPUT :


		switch (Port)
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	a9 f0       	breq	.+42     	; 0x16e <DIO_SetPinDir+0x3a>
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	30 f0       	brcs	.+12     	; 0x154 <DIO_SetPinDir+0x20>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	f1 f0       	breq	.+60     	; 0x188 <DIO_SetPinDir+0x54>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	09 f0       	breq	.+2      	; 0x152 <DIO_SetPinDir+0x1e>
 150:	75 c0       	rjmp	.+234    	; 0x23c <DIO_SetPinDir+0x108>
 152:	27 c0       	rjmp	.+78     	; 0x1a2 <DIO_SetPinDir+0x6e>
		{
		case DIO_PORTA :

			SET_BIT(DDRA,Pin);
 154:	2a b3       	in	r18, 0x1a	; 26
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	ac 01       	movw	r20, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <DIO_SetPinDir+0x2e>
 15e:	44 0f       	add	r20, r20
 160:	55 1f       	adc	r21, r21
 162:	6a 95       	dec	r22
 164:	e2 f7       	brpl	.-8      	; 0x15e <DIO_SetPinDir+0x2a>
 166:	ba 01       	movw	r22, r20
 168:	62 2b       	or	r22, r18
 16a:	6a bb       	out	0x1a, r22	; 26

			break;
 16c:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(DDRB,Pin);
 16e:	27 b3       	in	r18, 0x17	; 23
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	ac 01       	movw	r20, r24
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_SetPinDir+0x48>
 178:	44 0f       	add	r20, r20
 17a:	55 1f       	adc	r21, r21
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_SetPinDir+0x44>
 180:	ba 01       	movw	r22, r20
 182:	62 2b       	or	r22, r18
 184:	67 bb       	out	0x17, r22	; 23

			break;
 186:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(DDRC,Pin);
 188:	24 b3       	in	r18, 0x14	; 20
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	ac 01       	movw	r20, r24
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_SetPinDir+0x62>
 192:	44 0f       	add	r20, r20
 194:	55 1f       	adc	r21, r21
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_SetPinDir+0x5e>
 19a:	ba 01       	movw	r22, r20
 19c:	62 2b       	or	r22, r18
 19e:	64 bb       	out	0x14, r22	; 20

			break;
 1a0:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(DDRD,Pin);
 1a2:	21 b3       	in	r18, 0x11	; 17
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	ac 01       	movw	r20, r24
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinDir+0x7c>
 1ac:	44 0f       	add	r20, r20
 1ae:	55 1f       	adc	r21, r21
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinDir+0x78>
 1b4:	ba 01       	movw	r22, r20
 1b6:	62 2b       	or	r22, r18
 1b8:	61 bb       	out	0x11, r22	; 17

			break;
 1ba:	08 95       	ret
		break;

		case DIO_PIN_INPUT :


			switch (Port)
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	a9 f0       	breq	.+42     	; 0x1ea <DIO_SetPinDir+0xb6>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	28 f0       	brcs	.+10     	; 0x1ce <DIO_SetPinDir+0x9a>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	f9 f0       	breq	.+62     	; 0x206 <DIO_SetPinDir+0xd2>
 1c8:	83 30       	cpi	r24, 0x03	; 3
 1ca:	c1 f5       	brne	.+112    	; 0x23c <DIO_SetPinDir+0x108>
 1cc:	2a c0       	rjmp	.+84     	; 0x222 <DIO_SetPinDir+0xee>
			{
			case DIO_PORTA :

				CLR_BIT(DDRA,Pin);
 1ce:	2a b3       	in	r18, 0x1a	; 26
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	ac 01       	movw	r20, r24
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_SetPinDir+0xa8>
 1d8:	44 0f       	add	r20, r20
 1da:	55 1f       	adc	r21, r21
 1dc:	6a 95       	dec	r22
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_SetPinDir+0xa4>
 1e0:	ba 01       	movw	r22, r20
 1e2:	60 95       	com	r22
 1e4:	62 23       	and	r22, r18
 1e6:	6a bb       	out	0x1a, r22	; 26

				break;
 1e8:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(DDRB,Pin);
 1ea:	27 b3       	in	r18, 0x17	; 23
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	ac 01       	movw	r20, r24
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_SetPinDir+0xc4>
 1f4:	44 0f       	add	r20, r20
 1f6:	55 1f       	adc	r21, r21
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_SetPinDir+0xc0>
 1fc:	ba 01       	movw	r22, r20
 1fe:	60 95       	com	r22
 200:	62 23       	and	r22, r18
 202:	67 bb       	out	0x17, r22	; 23

				break;
 204:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(DDRC,Pin);
 206:	24 b3       	in	r18, 0x14	; 20
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	ac 01       	movw	r20, r24
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SetPinDir+0xe0>
 210:	44 0f       	add	r20, r20
 212:	55 1f       	adc	r21, r21
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SetPinDir+0xdc>
 218:	ba 01       	movw	r22, r20
 21a:	60 95       	com	r22
 21c:	62 23       	and	r22, r18
 21e:	64 bb       	out	0x14, r22	; 20

				break;
 220:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(DDRD,Pin);
 222:	21 b3       	in	r18, 0x11	; 17
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	ac 01       	movw	r20, r24
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_SetPinDir+0xfc>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_SetPinDir+0xf8>
 234:	ba 01       	movw	r22, r20
 236:	60 95       	com	r22
 238:	62 23       	and	r22, r18
 23a:	61 bb       	out	0x11, r22	; 17
 23c:	08 95       	ret

0000023e <DIO_WritePort>:


void DIO_WritePort(uint8 Port , uint8 Val)
{

	switch (Port)
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	49 f0       	breq	.+18     	; 0x254 <DIO_WritePort+0x16>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	28 f0       	brcs	.+10     	; 0x250 <DIO_WritePort+0x12>
 246:	82 30       	cpi	r24, 0x02	; 2
 248:	39 f0       	breq	.+14     	; 0x258 <DIO_WritePort+0x1a>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	41 f4       	brne	.+16     	; 0x25e <DIO_WritePort+0x20>
 24e:	06 c0       	rjmp	.+12     	; 0x25c <DIO_WritePort+0x1e>
	{
	case DIO_PORTA :

		PORTA = Val;
 250:	6b bb       	out	0x1b, r22	; 27

		break;
 252:	08 95       	ret

	case DIO_PORTB :

		PORTB = Val;
 254:	68 bb       	out	0x18, r22	; 24

		break;
 256:	08 95       	ret

	case DIO_PORTC :

		PORTB = Val;
 258:	68 bb       	out	0x18, r22	; 24

		break;
 25a:	08 95       	ret

	case DIO_PORTD :

		PORTD = Val;
 25c:	62 bb       	out	0x12, r22	; 18
 25e:	08 95       	ret

00000260 <DIO_WritePin>:



void DIO_WritePin(uint8 Port ,uint8 Pin, uint8 Val)
{
	switch (Val)
 260:	44 23       	and	r20, r20
 262:	09 f4       	brne	.+2      	; 0x266 <DIO_WritePin+0x6>
 264:	41 c0       	rjmp	.+130    	; 0x2e8 <DIO_WritePin+0x88>
 266:	41 30       	cpi	r20, 0x01	; 1
 268:	09 f0       	breq	.+2      	; 0x26c <DIO_WritePin+0xc>
 26a:	7e c0       	rjmp	.+252    	; 0x368 <DIO_WritePin+0x108>


	case DIO_PIN_HIGH :


		switch (Port)
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	a9 f0       	breq	.+42     	; 0x29a <DIO_WritePin+0x3a>
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	30 f0       	brcs	.+12     	; 0x280 <DIO_WritePin+0x20>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	f1 f0       	breq	.+60     	; 0x2b4 <DIO_WritePin+0x54>
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	09 f0       	breq	.+2      	; 0x27e <DIO_WritePin+0x1e>
 27c:	75 c0       	rjmp	.+234    	; 0x368 <DIO_WritePin+0x108>
 27e:	27 c0       	rjmp	.+78     	; 0x2ce <DIO_WritePin+0x6e>
		{
		case DIO_PORTA :

			SET_BIT(PORTA,Pin);
 280:	2b b3       	in	r18, 0x1b	; 27
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WritePin+0x2e>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WritePin+0x2a>
 292:	ba 01       	movw	r22, r20
 294:	62 2b       	or	r22, r18
 296:	6b bb       	out	0x1b, r22	; 27

			break;
 298:	08 95       	ret

		case DIO_PORTB :

			SET_BIT(PORTB,Pin);
 29a:	28 b3       	in	r18, 0x18	; 24
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	ac 01       	movw	r20, r24
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_WritePin+0x48>
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_WritePin+0x44>
 2ac:	ba 01       	movw	r22, r20
 2ae:	62 2b       	or	r22, r18
 2b0:	68 bb       	out	0x18, r22	; 24

			break;
 2b2:	08 95       	ret

		case DIO_PORTC :

			SET_BIT(PORTC,Pin);
 2b4:	25 b3       	in	r18, 0x15	; 21
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	ac 01       	movw	r20, r24
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <DIO_WritePin+0x62>
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <DIO_WritePin+0x5e>
 2c6:	ba 01       	movw	r22, r20
 2c8:	62 2b       	or	r22, r18
 2ca:	65 bb       	out	0x15, r22	; 21

			break;
 2cc:	08 95       	ret

		case DIO_PORTD :

			SET_BIT(PORTD,Pin);
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_WritePin+0x7c>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_WritePin+0x78>
 2e0:	ba 01       	movw	r22, r20
 2e2:	62 2b       	or	r22, r18
 2e4:	62 bb       	out	0x12, r22	; 18

			break;
 2e6:	08 95       	ret
		break;

		case DIO_PIN_LOW :


			switch (Port)
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	a9 f0       	breq	.+42     	; 0x316 <DIO_WritePin+0xb6>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	28 f0       	brcs	.+10     	; 0x2fa <DIO_WritePin+0x9a>
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	f9 f0       	breq	.+62     	; 0x332 <DIO_WritePin+0xd2>
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	c1 f5       	brne	.+112    	; 0x368 <DIO_WritePin+0x108>
 2f8:	2a c0       	rjmp	.+84     	; 0x34e <DIO_WritePin+0xee>
			{
			case DIO_PORTA :

				CLR_BIT(PORTA,Pin);
 2fa:	2b b3       	in	r18, 0x1b	; 27
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	ac 01       	movw	r20, r24
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_WritePin+0xa8>
 304:	44 0f       	add	r20, r20
 306:	55 1f       	adc	r21, r21
 308:	6a 95       	dec	r22
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_WritePin+0xa4>
 30c:	ba 01       	movw	r22, r20
 30e:	60 95       	com	r22
 310:	62 23       	and	r22, r18
 312:	6b bb       	out	0x1b, r22	; 27

				break;
 314:	08 95       	ret

			case DIO_PORTB :

				CLR_BIT(PORTB,Pin);
 316:	28 b3       	in	r18, 0x18	; 24
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	ac 01       	movw	r20, r24
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_WritePin+0xc4>
 320:	44 0f       	add	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_WritePin+0xc0>
 328:	ba 01       	movw	r22, r20
 32a:	60 95       	com	r22
 32c:	62 23       	and	r22, r18
 32e:	68 bb       	out	0x18, r22	; 24

				break;
 330:	08 95       	ret

			case DIO_PORTC :

				CLR_BIT(PORTC,Pin);
 332:	25 b3       	in	r18, 0x15	; 21
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	ac 01       	movw	r20, r24
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_WritePin+0xe0>
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	6a 95       	dec	r22
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_WritePin+0xdc>
 344:	ba 01       	movw	r22, r20
 346:	60 95       	com	r22
 348:	62 23       	and	r22, r18
 34a:	65 bb       	out	0x15, r22	; 21

				break;
 34c:	08 95       	ret

			case DIO_PORTD :

				CLR_BIT(PORTD,Pin);
 34e:	22 b3       	in	r18, 0x12	; 18
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ac 01       	movw	r20, r24
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_WritePin+0xfc>
 358:	44 0f       	add	r20, r20
 35a:	55 1f       	adc	r21, r21
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_WritePin+0xf8>
 360:	ba 01       	movw	r22, r20
 362:	60 95       	com	r22
 364:	62 23       	and	r22, r18
 366:	62 bb       	out	0x12, r22	; 18
 368:	08 95       	ret

0000036a <DIO_ReadPort>:



void DIO_ReadPort(uint8 Port , uint8* Val)
{
	switch (Port)
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	59 f0       	breq	.+22     	; 0x384 <DIO_ReadPort+0x1a>
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	28 f0       	brcs	.+10     	; 0x37c <DIO_ReadPort+0x12>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	59 f0       	breq	.+22     	; 0x38c <DIO_ReadPort+0x22>
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	81 f4       	brne	.+32     	; 0x39a <DIO_ReadPort+0x30>
 37a:	0c c0       	rjmp	.+24     	; 0x394 <DIO_ReadPort+0x2a>
		{
		case DIO_PORTA :

			*Val = PINA;
 37c:	89 b3       	in	r24, 0x19	; 25
 37e:	fb 01       	movw	r30, r22
 380:	80 83       	st	Z, r24

			break;
 382:	08 95       	ret

		case DIO_PORTB :

			*Val = PINB;
 384:	86 b3       	in	r24, 0x16	; 22
 386:	fb 01       	movw	r30, r22
 388:	80 83       	st	Z, r24

			break;
 38a:	08 95       	ret

		case DIO_PORTC :

			*Val = PINC;
 38c:	83 b3       	in	r24, 0x13	; 19
 38e:	fb 01       	movw	r30, r22
 390:	80 83       	st	Z, r24

			break;
 392:	08 95       	ret

		case DIO_PORTD :

			*Val = PIND;
 394:	80 b3       	in	r24, 0x10	; 16
 396:	fb 01       	movw	r30, r22
 398:	80 83       	st	Z, r24
 39a:	08 95       	ret

0000039c <DIO_ReadPin>:



void DIO_ReadPin (uint8 Port ,uint8 Pin, uint8* Val)
{
	switch (Port)
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	a1 f0       	breq	.+40     	; 0x3c8 <DIO_ReadPin+0x2c>
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	28 f0       	brcs	.+10     	; 0x3ae <DIO_ReadPin+0x12>
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	e9 f0       	breq	.+58     	; 0x3e2 <DIO_ReadPin+0x46>
 3a8:	83 30       	cpi	r24, 0x03	; 3
 3aa:	a1 f5       	brne	.+104    	; 0x414 <DIO_ReadPin+0x78>
 3ac:	27 c0       	rjmp	.+78     	; 0x3fc <DIO_ReadPin+0x60>
			{
			case DIO_PORTA :

				*Val =  GET_BIT(PINA,Pin);
 3ae:	89 b3       	in	r24, 0x19	; 25
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	9c 01       	movw	r18, r24
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <DIO_ReadPin+0x1e>
 3b6:	35 95       	asr	r19
 3b8:	27 95       	ror	r18
 3ba:	6a 95       	dec	r22
 3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <DIO_ReadPin+0x1a>
 3be:	b9 01       	movw	r22, r18
 3c0:	61 70       	andi	r22, 0x01	; 1
 3c2:	fa 01       	movw	r30, r20
 3c4:	60 83       	st	Z, r22

				break;
 3c6:	08 95       	ret

			case DIO_PORTB :

				*Val = GET_BIT(PINB,Pin);
 3c8:	86 b3       	in	r24, 0x16	; 22
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	9c 01       	movw	r18, r24
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_ReadPin+0x38>
 3d0:	35 95       	asr	r19
 3d2:	27 95       	ror	r18
 3d4:	6a 95       	dec	r22
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_ReadPin+0x34>
 3d8:	b9 01       	movw	r22, r18
 3da:	61 70       	andi	r22, 0x01	; 1
 3dc:	fa 01       	movw	r30, r20
 3de:	60 83       	st	Z, r22

				break;
 3e0:	08 95       	ret

			case DIO_PORTC :

				*Val = GET_BIT(PINC,Pin);
 3e2:	83 b3       	in	r24, 0x13	; 19
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	9c 01       	movw	r18, r24
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_ReadPin+0x52>
 3ea:	35 95       	asr	r19
 3ec:	27 95       	ror	r18
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_ReadPin+0x4e>
 3f2:	b9 01       	movw	r22, r18
 3f4:	61 70       	andi	r22, 0x01	; 1
 3f6:	fa 01       	movw	r30, r20
 3f8:	60 83       	st	Z, r22

				break;
 3fa:	08 95       	ret

			case DIO_PORTD :

				*Val = GET_BIT(PIND,Pin);
 3fc:	80 b3       	in	r24, 0x10	; 16
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	9c 01       	movw	r18, r24
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_ReadPin+0x6c>
 404:	35 95       	asr	r19
 406:	27 95       	ror	r18
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_ReadPin+0x68>
 40c:	b9 01       	movw	r22, r18
 40e:	61 70       	andi	r22, 0x01	; 1
 410:	fa 01       	movw	r30, r20
 412:	60 83       	st	Z, r22
 414:	08 95       	ret

00000416 <DIO_SetPullUp>:



void DIO_SetPullUp(uint8 Port ,uint8 Pin )
{
	switch(Port)
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	a1 f0       	breq	.+40     	; 0x442 <DIO_SetPullUp+0x2c>
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	28 f0       	brcs	.+10     	; 0x428 <DIO_SetPullUp+0x12>
 41e:	82 30       	cpi	r24, 0x02	; 2
 420:	e9 f0       	breq	.+58     	; 0x45c <DIO_SetPullUp+0x46>
 422:	83 30       	cpi	r24, 0x03	; 3
 424:	a1 f5       	brne	.+104    	; 0x48e <DIO_SetPullUp+0x78>
 426:	27 c0       	rjmp	.+78     	; 0x476 <DIO_SetPullUp+0x60>
	{

		case DIO_PORTA :

		SET_BIT(PORTA,Pin);
 428:	2b b3       	in	r18, 0x1b	; 27
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	ac 01       	movw	r20, r24
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_SetPullUp+0x20>
 432:	44 0f       	add	r20, r20
 434:	55 1f       	adc	r21, r21
 436:	6a 95       	dec	r22
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_SetPullUp+0x1c>
 43a:	ba 01       	movw	r22, r20
 43c:	62 2b       	or	r22, r18
 43e:	6b bb       	out	0x1b, r22	; 27

		break;
 440:	08 95       	ret

		case DIO_PORTB :

		SET_BIT(PORTB,Pin);
 442:	28 b3       	in	r18, 0x18	; 24
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	ac 01       	movw	r20, r24
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_SetPullUp+0x3a>
 44c:	44 0f       	add	r20, r20
 44e:	55 1f       	adc	r21, r21
 450:	6a 95       	dec	r22
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_SetPullUp+0x36>
 454:	ba 01       	movw	r22, r20
 456:	62 2b       	or	r22, r18
 458:	68 bb       	out	0x18, r22	; 24

		break;
 45a:	08 95       	ret

		case DIO_PORTC :

		SET_BIT(PORTC,Pin);
 45c:	25 b3       	in	r18, 0x15	; 21
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	ac 01       	movw	r20, r24
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_SetPullUp+0x54>
 466:	44 0f       	add	r20, r20
 468:	55 1f       	adc	r21, r21
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_SetPullUp+0x50>
 46e:	ba 01       	movw	r22, r20
 470:	62 2b       	or	r22, r18
 472:	65 bb       	out	0x15, r22	; 21

		break;
 474:	08 95       	ret

		case DIO_PORTD :

		SET_BIT(PORTD,Pin);
 476:	22 b3       	in	r18, 0x12	; 18
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	ac 01       	movw	r20, r24
 47e:	02 c0       	rjmp	.+4      	; 0x484 <DIO_SetPullUp+0x6e>
 480:	44 0f       	add	r20, r20
 482:	55 1f       	adc	r21, r21
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <DIO_SetPullUp+0x6a>
 488:	ba 01       	movw	r22, r20
 48a:	62 2b       	or	r22, r18
 48c:	62 bb       	out	0x12, r22	; 18
 48e:	08 95       	ret

00000490 <LCD_WriteCommand>:
#endif
	
}

void LCD_WriteCommand(uint8 cmd)
{
 490:	cf 93       	push	r28
 492:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_LOW);
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	62 e0       	ldi	r22, 0x02	; 2
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	63 e0       	ldi	r22, 0x03	; 3
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 4b2:	8b b3       	in	r24, 0x1b	; 27
 4b4:	9c 2f       	mov	r25, r28
 4b6:	90 7f       	andi	r25, 0xF0	; 240
 4b8:	8f 70       	andi	r24, 0x0F	; 15
 4ba:	89 2b       	or	r24, r25
 4bc:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	63 e0       	ldi	r22, 0x03	; 3
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
 4c8:	8f e9       	ldi	r24, 0x9F	; 159
 4ca:	9f e0       	ldi	r25, 0x0F	; 15
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_WriteCommand+0x3c>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <LCD_WriteCommand+0x42>
 4d2:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	63 e0       	ldi	r22, 0x03	; 3
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
	
	PORTA = (cmd << 4) | (PORTA & 0x0F);
 4de:	8b b3       	in	r24, 0x1b	; 27
 4e0:	c2 95       	swap	r28
 4e2:	c0 7f       	andi	r28, 0xF0	; 240
 4e4:	8f 70       	andi	r24, 0x0F	; 15
 4e6:	c8 2b       	or	r28, r24
 4e8:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	63 e0       	ldi	r22, 0x03	; 3
 4ee:	41 e0       	ldi	r20, 0x01	; 1
 4f0:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
 4f4:	8f e9       	ldi	r24, 0x9F	; 159
 4f6:	9f e0       	ldi	r25, 0x0F	; 15
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	f1 f7       	brne	.-4      	; 0x4f8 <LCD_WriteCommand+0x68>
 4fc:	00 c0       	rjmp	.+0      	; 0x4fe <LCD_WriteCommand+0x6e>
 4fe:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	63 e0       	ldi	r22, 0x03	; 3
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
 50a:	8f e1       	ldi	r24, 0x1F	; 31
 50c:	9e e4       	ldi	r25, 0x4E	; 78
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <LCD_WriteCommand+0x7e>
 512:	00 c0       	rjmp	.+0      	; 0x514 <LCD_WriteCommand+0x84>
 514:	00 00       	nop
	
	_delay_ms(5);
	
}
 516:	cf 91       	pop	r28
 518:	08 95       	ret

0000051a <LCD_Init>:
	
	_delay_ms(5);
	
	#elif LCD_MODE == 4
	
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RS_PIN , DIO_PIN_OUTPUT);
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	41 e0       	ldi	r20, 0x01	; 1
 520:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_RW_PIN , DIO_PIN_OUTPUT);
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_CMD_PORT ,LCD_E_PIN , DIO_PIN_OUTPUT);
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	63 e0       	ldi	r22, 0x03	; 3
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
		
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D4 , DIO_PIN_OUTPUT);
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	64 e0       	ldi	r22, 0x04	; 4
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D5 , DIO_PIN_OUTPUT);
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	65 e0       	ldi	r22, 0x05	; 5
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D6 , DIO_PIN_OUTPUT);
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	66 e0       	ldi	r22, 0x06	; 6
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
		DIO_SetPinDir(LCD_4BIT_DATA_PORT ,LCD_D7 , DIO_PIN_OUTPUT);
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	67 e0       	ldi	r22, 0x07	; 7
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	0e 94 9a 00 	call	0x134	; 0x134 <DIO_SetPinDir>
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	91 ee       	ldi	r25, 0xE1	; 225
 564:	a4 e0       	ldi	r26, 0x04	; 4
 566:	81 50       	subi	r24, 0x01	; 1
 568:	90 40       	sbci	r25, 0x00	; 0
 56a:	a0 40       	sbci	r26, 0x00	; 0
 56c:	e1 f7       	brne	.-8      	; 0x566 <LCD_Init+0x4c>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <LCD_Init+0x56>
 570:	00 00       	nop
		
		_delay_ms(100);
		
		LCD_WriteCommand(0x33);
 572:	83 e3       	ldi	r24, 0x33	; 51
 574:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>
		LCD_WriteCommand(0x32);
 578:	82 e3       	ldi	r24, 0x32	; 50
 57a:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>
		LCD_WriteCommand(0x28);
 57e:	88 e2       	ldi	r24, 0x28	; 40
 580:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>
		LCD_WriteCommand(0x0C);
 584:	8c e0       	ldi	r24, 0x0C	; 12
 586:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>
        LCD_WriteCommand(0x01);
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>
		LCD_WriteCommand(0x06);
 590:	86 e0       	ldi	r24, 0x06	; 6
 592:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>
		LCD_WriteCommand(0x02);
 596:	82 e0       	ldi	r24, 0x02	; 2
 598:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>

		
	
#endif
	
}
 59c:	08 95       	ret

0000059e <LCD_WriteChar>:
	
}


void LCD_WriteChar(uint8 data)
{
 59e:	cf 93       	push	r28
 5a0:	c8 2f       	mov	r28, r24
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RS_PIN, DIO_PIN_HIGH);
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_RW_PIN, DIO_PIN_LOW);
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	62 e0       	ldi	r22, 0x02	; 2
 5b0:	40 e0       	ldi	r20, 0x00	; 0
 5b2:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	63 e0       	ldi	r22, 0x03	; 3
 5ba:	40 e0       	ldi	r20, 0x00	; 0
 5bc:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
	
	PORTA = (data & 0xF0) ;
 5c0:	8c 2f       	mov	r24, r28
 5c2:	80 7f       	andi	r24, 0xF0	; 240
 5c4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	63 e0       	ldi	r22, 0x03	; 3
 5ca:	41 e0       	ldi	r20, 0x01	; 1
 5cc:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
 5d0:	8f e9       	ldi	r24, 0x9F	; 159
 5d2:	9f e0       	ldi	r25, 0x0F	; 15
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <LCD_WriteChar+0x36>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <LCD_WriteChar+0x3c>
 5da:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	63 e0       	ldi	r22, 0x03	; 3
 5e0:	40 e0       	ldi	r20, 0x00	; 0
 5e2:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
	
	PORTA = (data << 4) ;
 5e6:	c2 95       	swap	r28
 5e8:	c0 7f       	andi	r28, 0xF0	; 240
 5ea:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_HIGH);
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	63 e0       	ldi	r22, 0x03	; 3
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
 5f6:	8f e9       	ldi	r24, 0x9F	; 159
 5f8:	9f e0       	ldi	r25, 0x0F	; 15
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCD_WriteChar+0x5c>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <LCD_WriteChar+0x62>
 600:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(LCD_4BIT_CMD_PORT ,LCD_E_PIN, DIO_PIN_LOW);
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	63 e0       	ldi	r22, 0x03	; 3
 606:	40 e0       	ldi	r20, 0x00	; 0
 608:	0e 94 30 01 	call	0x260	; 0x260 <DIO_WritePin>
 60c:	8f e1       	ldi	r24, 0x1F	; 31
 60e:	9e e4       	ldi	r25, 0x4E	; 78
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	f1 f7       	brne	.-4      	; 0x610 <LCD_WriteChar+0x72>
 614:	00 c0       	rjmp	.+0      	; 0x616 <LCD_WriteChar+0x78>
 616:	00 00       	nop
	
	_delay_ms(5);
}
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <LCD_WriteString>:

void LCD_WriteString(uint8* str)
{
 61c:	0f 93       	push	r16
 61e:	1f 93       	push	r17
 620:	cf 93       	push	r28
 622:	8c 01       	movw	r16, r24
	uint8 i = 0;
	
	while(str[i] != '\0')
 624:	fc 01       	movw	r30, r24
 626:	80 81       	ld	r24, Z
 628:	88 23       	and	r24, r24
 62a:	51 f0       	breq	.+20     	; 0x640 <LCD_WriteString+0x24>
	_delay_ms(5);
}

void LCD_WriteString(uint8* str)
{
	uint8 i = 0;
 62c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(str[i] != '\0')
	{
		LCD_WriteChar(str[i]);
 62e:	0e 94 cf 02 	call	0x59e	; 0x59e <LCD_WriteChar>
		i++;
 632:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_WriteString(uint8* str)
{
	uint8 i = 0;
	
	while(str[i] != '\0')
 634:	f8 01       	movw	r30, r16
 636:	ec 0f       	add	r30, r28
 638:	f1 1d       	adc	r31, r1
 63a:	80 81       	ld	r24, Z
 63c:	88 23       	and	r24, r24
 63e:	b9 f7       	brne	.-18     	; 0x62e <LCD_WriteString+0x12>
	{
		LCD_WriteChar(str[i]);
		i++;
	}
}
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	08 95       	ret

00000648 <LCD_GoTo>:

void LCD_GoTo(uint8 row, uint8 col)
{
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	00 d0       	rcall	.+0      	; 0x64e <LCD_GoTo+0x6>
 64e:	cd b7       	in	r28, 0x3d	; 61
 650:	de b7       	in	r29, 0x3e	; 62
	uint8 pos[2] = {0x80 , 0xC0};
 652:	90 e8       	ldi	r25, 0x80	; 128
 654:	99 83       	std	Y+1, r25	; 0x01
 656:	90 ec       	ldi	r25, 0xC0	; 192
 658:	9a 83       	std	Y+2, r25	; 0x02
		
	LCD_WriteCommand(pos[row]+col);
 65a:	fe 01       	movw	r30, r28
 65c:	e8 0f       	add	r30, r24
 65e:	f1 1d       	adc	r31, r1
 660:	81 81       	ldd	r24, Z+1	; 0x01
 662:	86 0f       	add	r24, r22
 664:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>
		
}
 668:	0f 90       	pop	r0
 66a:	0f 90       	pop	r0
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

00000672 <LCD_Clear>:



void LCD_Clear(void)
{
	LCD_WriteCommand(0x01);
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	0e 94 48 02 	call	0x490	; 0x490 <LCD_WriteCommand>
}
 678:	08 95       	ret

0000067a <LCD_WriteInteger>:
void LCD_WriteInteger(sint32 *num)
{
 67a:	cf 93       	push	r28
 67c:	df 93       	push	r29
 67e:	00 d0       	rcall	.+0      	; 0x680 <LCD_WriteInteger+0x6>
 680:	00 d0       	rcall	.+0      	; 0x682 <LCD_WriteInteger+0x8>
 682:	0f 92       	push	r0
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
	char buffer [5];

	
		itoa(*num,buffer,10);
 688:	fc 01       	movw	r30, r24
 68a:	80 81       	ld	r24, Z
 68c:	91 81       	ldd	r25, Z+1	; 0x01
 68e:	be 01       	movw	r22, r28
 690:	6f 5f       	subi	r22, 0xFF	; 255
 692:	7f 4f       	sbci	r23, 0xFF	; 255
 694:	4a e0       	ldi	r20, 0x0A	; 10
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	0e 94 60 03 	call	0x6c0	; 0x6c0 <itoa>
		LCD_WriteString(buffer);
 69c:	ce 01       	movw	r24, r28
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	0e 94 0e 03 	call	0x61c	; 0x61c <LCD_WriteString>
	      
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <TempsSensor_INIT>:

#include "Temp_sensor.h"

void TempsSensor_INIT(void)
{
	ADC_INIT();
 6b4:	0e 94 49 00 	call	0x92	; 0x92 <ADC_INIT>
}
 6b8:	08 95       	ret

000006ba <TempSensor_READ>:
void TempSensor_READ(uint16* temp)
{
	ADC_READ(temp);
 6ba:	0e 94 54 00 	call	0xa8	; 0xa8 <ADC_READ>
 6be:	08 95       	ret

000006c0 <itoa>:
 6c0:	fb 01       	movw	r30, r22
 6c2:	9f 01       	movw	r18, r30
 6c4:	e8 94       	clt
 6c6:	42 30       	cpi	r20, 0x02	; 2
 6c8:	c4 f0       	brlt	.+48     	; 0x6fa <itoa+0x3a>
 6ca:	45 32       	cpi	r20, 0x25	; 37
 6cc:	b4 f4       	brge	.+44     	; 0x6fa <itoa+0x3a>
 6ce:	4a 30       	cpi	r20, 0x0A	; 10
 6d0:	29 f4       	brne	.+10     	; 0x6dc <itoa+0x1c>
 6d2:	97 fb       	bst	r25, 7
 6d4:	1e f4       	brtc	.+6      	; 0x6dc <itoa+0x1c>
 6d6:	90 95       	com	r25
 6d8:	81 95       	neg	r24
 6da:	9f 4f       	sbci	r25, 0xFF	; 255
 6dc:	64 2f       	mov	r22, r20
 6de:	77 27       	eor	r23, r23
 6e0:	0e 94 91 03 	call	0x722	; 0x722 <__udivmodhi4>
 6e4:	80 5d       	subi	r24, 0xD0	; 208
 6e6:	8a 33       	cpi	r24, 0x3A	; 58
 6e8:	0c f0       	brlt	.+2      	; 0x6ec <itoa+0x2c>
 6ea:	89 5d       	subi	r24, 0xD9	; 217
 6ec:	81 93       	st	Z+, r24
 6ee:	cb 01       	movw	r24, r22
 6f0:	00 97       	sbiw	r24, 0x00	; 0
 6f2:	a1 f7       	brne	.-24     	; 0x6dc <itoa+0x1c>
 6f4:	16 f4       	brtc	.+4      	; 0x6fa <itoa+0x3a>
 6f6:	5d e2       	ldi	r21, 0x2D	; 45
 6f8:	51 93       	st	Z+, r21
 6fa:	10 82       	st	Z, r1
 6fc:	c9 01       	movw	r24, r18
 6fe:	0c 94 81 03 	jmp	0x702	; 0x702 <strrev>

00000702 <strrev>:
 702:	dc 01       	movw	r26, r24
 704:	fc 01       	movw	r30, r24
 706:	67 2f       	mov	r22, r23
 708:	71 91       	ld	r23, Z+
 70a:	77 23       	and	r23, r23
 70c:	e1 f7       	brne	.-8      	; 0x706 <strrev+0x4>
 70e:	32 97       	sbiw	r30, 0x02	; 2
 710:	04 c0       	rjmp	.+8      	; 0x71a <strrev+0x18>
 712:	7c 91       	ld	r23, X
 714:	6d 93       	st	X+, r22
 716:	70 83       	st	Z, r23
 718:	62 91       	ld	r22, -Z
 71a:	ae 17       	cp	r26, r30
 71c:	bf 07       	cpc	r27, r31
 71e:	c8 f3       	brcs	.-14     	; 0x712 <strrev+0x10>
 720:	08 95       	ret

00000722 <__udivmodhi4>:
 722:	aa 1b       	sub	r26, r26
 724:	bb 1b       	sub	r27, r27
 726:	51 e1       	ldi	r21, 0x11	; 17
 728:	07 c0       	rjmp	.+14     	; 0x738 <__udivmodhi4_ep>

0000072a <__udivmodhi4_loop>:
 72a:	aa 1f       	adc	r26, r26
 72c:	bb 1f       	adc	r27, r27
 72e:	a6 17       	cp	r26, r22
 730:	b7 07       	cpc	r27, r23
 732:	10 f0       	brcs	.+4      	; 0x738 <__udivmodhi4_ep>
 734:	a6 1b       	sub	r26, r22
 736:	b7 0b       	sbc	r27, r23

00000738 <__udivmodhi4_ep>:
 738:	88 1f       	adc	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	5a 95       	dec	r21
 73e:	a9 f7       	brne	.-22     	; 0x72a <__udivmodhi4_loop>
 740:	80 95       	com	r24
 742:	90 95       	com	r25
 744:	bc 01       	movw	r22, r24
 746:	cd 01       	movw	r24, r26
 748:	08 95       	ret

0000074a <_exit>:
 74a:	f8 94       	cli

0000074c <__stop_program>:
 74c:	ff cf       	rjmp	.-2      	; 0x74c <__stop_program>
